"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AccountLinkTransactionBodyBuilder_1 = require("./AccountLinkTransactionBodyBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var TransactionBuilder_1 = require("./TransactionBuilder");
var AccountLinkTransactionBuilder = (function (_super) {
    __extends(AccountLinkTransactionBuilder, _super);
    function AccountLinkTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, remotePublicKey, linkAction) {
        var _this = _super.call(this, signature, signerPublicKey, version, network, type, fee, deadline) || this;
        _this.accountLinkTransactionBody = new AccountLinkTransactionBodyBuilder_1.AccountLinkTransactionBodyBuilder(remotePublicKey, linkAction);
        return _this;
    }
    AccountLinkTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = TransactionBuilder_1.TransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var accountLinkTransactionBody = AccountLinkTransactionBodyBuilder_1.AccountLinkTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, accountLinkTransactionBody.getSize());
        return new AccountLinkTransactionBuilder(superObject.signature, superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, superObject.fee, superObject.deadline, accountLinkTransactionBody.remotePublicKey, accountLinkTransactionBody.linkAction);
    };
    AccountLinkTransactionBuilder.prototype.getRemotePublicKey = function () {
        return this.accountLinkTransactionBody.getRemotePublicKey();
    };
    AccountLinkTransactionBuilder.prototype.getLinkAction = function () {
        return this.accountLinkTransactionBody.getLinkAction();
    };
    AccountLinkTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.accountLinkTransactionBody.getSize();
        return size;
    };
    AccountLinkTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var accountLinkTransactionBodyBytes = this.accountLinkTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, accountLinkTransactionBodyBytes);
        return newArray;
    };
    return AccountLinkTransactionBuilder;
}(TransactionBuilder_1.TransactionBuilder));
exports.AccountLinkTransactionBuilder = AccountLinkTransactionBuilder;
//# sourceMappingURL=AccountLinkTransactionBuilder.js.map