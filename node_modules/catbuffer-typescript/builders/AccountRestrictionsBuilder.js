"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccountRestrictionsInfoBuilder_1 = require("./AccountRestrictionsInfoBuilder");
var AddressDto_1 = require("./AddressDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var AccountRestrictionsBuilder = (function () {
    function AccountRestrictionsBuilder(address, restrictions) {
        this.address = address;
        this.restrictions = restrictions;
    }
    AccountRestrictionsBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var address = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        var restrictionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        var restrictions = [];
        for (var i = 0; i < (Array.isArray(restrictionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(restrictionsCount) : restrictionsCount); i++) {
            var item = AccountRestrictionsInfoBuilder_1.AccountRestrictionsInfoBuilder.loadFromBinary(Uint8Array.from(byteArray));
            restrictions.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new AccountRestrictionsBuilder(address, restrictions);
    };
    AccountRestrictionsBuilder.prototype.getAddress = function () {
        return this.address;
    };
    AccountRestrictionsBuilder.prototype.getRestrictions = function () {
        return this.restrictions;
    };
    AccountRestrictionsBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.address.getSize();
        size += 8;
        this.restrictions.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    AccountRestrictionsBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var addressBytes = this.address.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        var restrictionsCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.restrictions.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictionsCountBytes);
        this.restrictions.forEach(function (item) {
            var restrictionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictionsBytes);
        });
        return newArray;
    };
    return AccountRestrictionsBuilder;
}());
exports.AccountRestrictionsBuilder = AccountRestrictionsBuilder;
//# sourceMappingURL=AccountRestrictionsBuilder.js.map