"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccountRestrictionAddressValueBuilder_1 = require("./AccountRestrictionAddressValueBuilder");
var AccountRestrictionMosaicValueBuilder_1 = require("./AccountRestrictionMosaicValueBuilder");
var AccountRestrictionTransactionTypeValueBuilder_1 = require("./AccountRestrictionTransactionTypeValueBuilder");
var ExpandedAccountRestrictionFlagsDto_1 = require("./ExpandedAccountRestrictionFlagsDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var AccountRestrictionsInfoBuilder = (function () {
    function AccountRestrictionsInfoBuilder(restrictions1, restrictions2, restrictions3, restrictions4, restrictions5, restrictions6, restrictions7, restrictions8) {
        if ((restrictions1 && restrictions2 && restrictions3 && restrictions4 && restrictions5 && restrictions6 && restrictions7 && restrictions8) || (!restrictions1 && !restrictions2 && !restrictions3 && !restrictions4 && !restrictions5 && !restrictions6 && !restrictions7 && !restrictions8)) {
            throw new Error('Invalid conditional parameters');
        }
        this.restrictions1 = restrictions1;
        this.restrictions2 = restrictions2;
        this.restrictions3 = restrictions3;
        this.restrictions4 = restrictions4;
        this.restrictions5 = restrictions5;
        this.restrictions6 = restrictions6;
        this.restrictions7 = restrictions7;
        this.restrictions8 = restrictions8;
        if (restrictions1) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS;
        }
        else if (restrictions2) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING;
        }
        else if (restrictions3) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_BLOCK;
        }
        else if (restrictions4) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING_BLOCK;
        }
        else if (restrictions5) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID;
        }
        else if (restrictions6) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID_BLOCK;
        }
        else if (restrictions7) {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING;
        }
        else {
            this.restrictionFlags = ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING_BLOCK;
        }
    }
    AccountRestrictionsInfoBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var restrictionFlags = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        var restrictionFlagsConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        var restrictions1;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS) {
            restrictions1 = AccountRestrictionAddressValueBuilder_1.AccountRestrictionAddressValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions2;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING) {
            restrictions2 = AccountRestrictionAddressValueBuilder_1.AccountRestrictionAddressValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions3;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_BLOCK) {
            restrictions3 = AccountRestrictionAddressValueBuilder_1.AccountRestrictionAddressValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions4;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING_BLOCK) {
            restrictions4 = AccountRestrictionAddressValueBuilder_1.AccountRestrictionAddressValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions5;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID) {
            restrictions5 = AccountRestrictionMosaicValueBuilder_1.AccountRestrictionMosaicValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions6;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID_BLOCK) {
            restrictions6 = AccountRestrictionMosaicValueBuilder_1.AccountRestrictionMosaicValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions7;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING) {
            restrictions7 = AccountRestrictionTransactionTypeValueBuilder_1.AccountRestrictionTransactionTypeValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        var restrictions8;
        if (restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING_BLOCK) {
            restrictions8 = AccountRestrictionTransactionTypeValueBuilder_1.AccountRestrictionTransactionTypeValueBuilder.loadFromBinary(restrictionFlagsConditionBytes);
        }
        return new AccountRestrictionsInfoBuilder(restrictions1, restrictions2, restrictions3, restrictions4, restrictions5, restrictions6, restrictions7, restrictions8);
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictionFlags = function () {
        return this.restrictionFlags;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions1 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS) {
            throw new Error('restrictionFlags is not set to ADDRESS.');
        }
        return this.restrictions1;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions2 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING) {
            throw new Error('restrictionFlags is not set to ADDRESS_OUTGOING.');
        }
        return this.restrictions2;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions3 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_BLOCK) {
            throw new Error('restrictionFlags is not set to ADDRESS_BLOCK.');
        }
        return this.restrictions3;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions4 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING_BLOCK) {
            throw new Error('restrictionFlags is not set to ADDRESS_OUTGOING_BLOCK.');
        }
        return this.restrictions4;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions5 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID) {
            throw new Error('restrictionFlags is not set to MOSAIC_ID.');
        }
        return this.restrictions5;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions6 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID_BLOCK) {
            throw new Error('restrictionFlags is not set to MOSAIC_ID_BLOCK.');
        }
        return this.restrictions6;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions7 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING) {
            throw new Error('restrictionFlags is not set to TRANSACTION_TYPE_OUTGOING.');
        }
        return this.restrictions7;
    };
    AccountRestrictionsInfoBuilder.prototype.getRestrictions8 = function () {
        if (this.restrictionFlags !== ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING_BLOCK) {
            throw new Error('restrictionFlags is not set to TRANSACTION_TYPE_OUTGOING_BLOCK.');
        }
        return this.restrictions8;
    };
    AccountRestrictionsInfoBuilder.prototype.getSize = function () {
        var size = 0;
        size += 2;
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS) {
            size += this.restrictions1.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING) {
            size += this.restrictions2.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_BLOCK) {
            size += this.restrictions3.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING_BLOCK) {
            size += this.restrictions4.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID) {
            size += this.restrictions5.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID_BLOCK) {
            size += this.restrictions6.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING) {
            size += this.restrictions7.getSize();
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING_BLOCK) {
            size += this.restrictions8.getSize();
        }
        return size;
    };
    AccountRestrictionsInfoBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var restrictionFlagsBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getRestrictionFlags(), 2);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictionFlagsBytes);
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS) {
            var restrictions1Bytes = this.restrictions1.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions1Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING) {
            var restrictions2Bytes = this.restrictions2.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions2Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_BLOCK) {
            var restrictions3Bytes = this.restrictions3.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions3Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.ADDRESS_OUTGOING_BLOCK) {
            var restrictions4Bytes = this.restrictions4.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions4Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID) {
            var restrictions5Bytes = this.restrictions5.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions5Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.MOSAIC_ID_BLOCK) {
            var restrictions6Bytes = this.restrictions6.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions6Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING) {
            var restrictions7Bytes = this.restrictions7.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions7Bytes);
        }
        if (this.restrictionFlags === ExpandedAccountRestrictionFlagsDto_1.ExpandedAccountRestrictionFlagsDto.TRANSACTION_TYPE_OUTGOING_BLOCK) {
            var restrictions8Bytes = this.restrictions8.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, restrictions8Bytes);
        }
        return newArray;
    };
    return AccountRestrictionsInfoBuilder;
}());
exports.AccountRestrictionsInfoBuilder = AccountRestrictionsInfoBuilder;
//# sourceMappingURL=AccountRestrictionsInfoBuilder.js.map