"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AccountStateFormatDto_1 = require("./AccountStateFormatDto");
var AddressDto_1 = require("./AddressDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var HeightActivityBucketsBuilder_1 = require("./HeightActivityBucketsBuilder");
var HeightDto_1 = require("./HeightDto");
var ImportanceSnapshotBuilder_1 = require("./ImportanceSnapshotBuilder");
var KeyDto_1 = require("./KeyDto");
var MosaicBuilder_1 = require("./MosaicBuilder");
var MosaicIdDto_1 = require("./MosaicIdDto");
var AccountStateBuilder = (function () {
    function AccountStateBuilder(address, addressHeight, publicKey, publicKeyHeight, accountType, linkedAccountKey, currencyMosaicId, balances, importanceSnapshots, activityBuckets) {
        if ((importanceSnapshots && activityBuckets) || (!importanceSnapshots && !activityBuckets)) {
            throw new Error('Invalid conditional parameters');
        }
        this.address = address;
        this.addressHeight = addressHeight;
        this.publicKey = publicKey;
        this.publicKeyHeight = publicKeyHeight;
        this.accountType = accountType;
        this.linkedAccountKey = linkedAccountKey;
        this.importanceSnapshots = importanceSnapshots;
        this.activityBuckets = activityBuckets;
        this.currencyMosaicId = currencyMosaicId;
        this.balances = balances;
        if (importanceSnapshots) {
            this.format = AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE;
        }
        else {
            this.format = AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE;
        }
    }
    AccountStateBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var address = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        var addressHeight = HeightDto_1.HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, addressHeight.getSize());
        var publicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, publicKey.getSize());
        var publicKeyHeight = HeightDto_1.HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, publicKeyHeight.getSize());
        var accountType = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var linkedAccountKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, linkedAccountKey.getSize());
        var format = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var formatConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        var currencyMosaicId = MosaicIdDto_1.MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, currencyMosaicId.getSize());
        var balancesCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        var balances = [];
        for (var i = 0; i < (Array.isArray(balancesCount) ? GeneratorUtils_1.GeneratorUtils.compact(balancesCount) : balancesCount); i++) {
            var item = MosaicBuilder_1.MosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
            balances.push(item);
            byteArray.splice(0, item.getSize());
        }
        var importanceSnapshots;
        if (format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            importanceSnapshots = ImportanceSnapshotBuilder_1.ImportanceSnapshotBuilder.loadFromBinary(formatConditionBytes);
        }
        var activityBuckets;
        if (format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            activityBuckets = HeightActivityBucketsBuilder_1.HeightActivityBucketsBuilder.loadFromBinary(formatConditionBytes);
        }
        return new AccountStateBuilder(address, addressHeight, publicKey, publicKeyHeight, accountType, linkedAccountKey, currencyMosaicId, balances, importanceSnapshots, activityBuckets);
    };
    AccountStateBuilder.prototype.getAddress = function () {
        return this.address;
    };
    AccountStateBuilder.prototype.getAddressHeight = function () {
        return this.addressHeight;
    };
    AccountStateBuilder.prototype.getPublicKey = function () {
        return this.publicKey;
    };
    AccountStateBuilder.prototype.getPublicKeyHeight = function () {
        return this.publicKeyHeight;
    };
    AccountStateBuilder.prototype.getAccountType = function () {
        return this.accountType;
    };
    AccountStateBuilder.prototype.getLinkedAccountKey = function () {
        return this.linkedAccountKey;
    };
    AccountStateBuilder.prototype.getFormat = function () {
        return this.format;
    };
    AccountStateBuilder.prototype.getImportanceSnapshots = function () {
        if (this.format !== AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            throw new Error('format is not set to HIGH_VALUE.');
        }
        return this.importanceSnapshots;
    };
    AccountStateBuilder.prototype.getActivityBuckets = function () {
        if (this.format !== AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            throw new Error('format is not set to HIGH_VALUE.');
        }
        return this.activityBuckets;
    };
    AccountStateBuilder.prototype.getCurrencyMosaicId = function () {
        return this.currencyMosaicId;
    };
    AccountStateBuilder.prototype.getBalances = function () {
        return this.balances;
    };
    AccountStateBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.address.getSize();
        size += this.addressHeight.getSize();
        size += this.publicKey.getSize();
        size += this.publicKeyHeight.getSize();
        size += 1;
        size += this.linkedAccountKey.getSize();
        size += 1;
        if (this.format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            size += this.importanceSnapshots.getSize();
        }
        if (this.format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            size += this.activityBuckets.getSize();
        }
        size += this.currencyMosaicId.getSize();
        size += 2;
        this.balances.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    AccountStateBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var addressBytes = this.address.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        var addressHeightBytes = this.addressHeight.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressHeightBytes);
        var publicKeyBytes = this.publicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyBytes);
        var publicKeyHeightBytes = this.publicKeyHeight.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyHeightBytes);
        var accountTypeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.accountType, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, accountTypeBytes);
        var linkedAccountKeyBytes = this.linkedAccountKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, linkedAccountKeyBytes);
        var formatBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.format, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, formatBytes);
        if (this.format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            var importanceSnapshotsBytes = this.importanceSnapshots.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, importanceSnapshotsBytes);
        }
        if (this.format === AccountStateFormatDto_1.AccountStateFormatDto.HIGH_VALUE) {
            var activityBucketsBytes = this.activityBuckets.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, activityBucketsBytes);
        }
        var currencyMosaicIdBytes = this.currencyMosaicId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, currencyMosaicIdBytes);
        var balancesCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.balances.length, 2);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, balancesCountBytes);
        this.balances.forEach(function (item) {
            var balancesBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, balancesBytes);
        });
        return newArray;
    };
    return AccountStateBuilder;
}());
exports.AccountStateBuilder = AccountStateBuilder;
//# sourceMappingURL=AccountStateBuilder.js.map