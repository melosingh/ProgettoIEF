"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AddressKeyValueBuilder_1 = require("./AddressKeyValueBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var AddressKeyValueSetBuilder = (function () {
    function AddressKeyValueSetBuilder(keys) {
        this.keys = keys;
    }
    AddressKeyValueSetBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var keyValueCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var keys = [];
        for (var i = 0; i < (Array.isArray(keyValueCount) ? GeneratorUtils_1.GeneratorUtils.compact(keyValueCount) : keyValueCount); i++) {
            var item = AddressKeyValueBuilder_1.AddressKeyValueBuilder.loadFromBinary(Uint8Array.from(byteArray));
            keys.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new AddressKeyValueSetBuilder(keys);
    };
    AddressKeyValueSetBuilder.prototype.getKeys = function () {
        return this.keys;
    };
    AddressKeyValueSetBuilder.prototype.getSize = function () {
        var size = 0;
        size += 1;
        this.keys.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    AddressKeyValueSetBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var keyValueCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.keys.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, keyValueCountBytes);
        this.keys.forEach(function (item) {
            var keysBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, keysBytes);
        });
        return newArray;
    };
    return AddressKeyValueSetBuilder;
}());
exports.AddressKeyValueSetBuilder = AddressKeyValueSetBuilder;
//# sourceMappingURL=AddressKeyValueSetBuilder.js.map