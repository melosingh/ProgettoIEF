"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CosignatureBuilder_1 = require("./CosignatureBuilder");
var EmbeddedTransactionHelper_1 = require("./EmbeddedTransactionHelper");
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var AggregateTransactionBodyBuilder = (function () {
    function AggregateTransactionBodyBuilder(transactionsHash, transactions, cosignatures) {
        this.transactionsHash = transactionsHash;
        this.aggregateTransactionHeader_Reserved1 = 0;
        this.transactions = transactions;
        this.cosignatures = cosignatures;
    }
    AggregateTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var transactionsHash = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, transactionsHash.getSize());
        var payloadSize = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var aggregateTransactionHeader_Reserved1 = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var transactionsByteSize = payloadSize;
        var transactions = [];
        while (transactionsByteSize > 0) {
            var item = EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.loadFromBinary(Uint8Array.from(byteArray));
            transactions.push(item);
            var itemSize = item.getSize() + GeneratorUtils_1.GeneratorUtils.getTransactionPaddingSize(item.getSize(), 8);
            transactionsByteSize -= itemSize;
            byteArray.splice(0, itemSize);
        }
        var cosignaturesByteSize = byteArray.length;
        var cosignatures = [];
        while (cosignaturesByteSize > 0) {
            var item = CosignatureBuilder_1.CosignatureBuilder.loadFromBinary(Uint8Array.from(byteArray));
            cosignatures.push(item);
            var itemSize = item.getSize();
            cosignaturesByteSize -= itemSize;
            byteArray.splice(0, itemSize);
        }
        return new AggregateTransactionBodyBuilder(transactionsHash, transactions, cosignatures);
    };
    AggregateTransactionBodyBuilder.prototype.getTransactionsHash = function () {
        return this.transactionsHash;
    };
    AggregateTransactionBodyBuilder.prototype.getAggregateTransactionHeader_Reserved1 = function () {
        return this.aggregateTransactionHeader_Reserved1;
    };
    AggregateTransactionBodyBuilder.prototype.getTransactions = function () {
        return this.transactions;
    };
    AggregateTransactionBodyBuilder.prototype.getCosignatures = function () {
        return this.cosignatures;
    };
    AggregateTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.transactionsHash.getSize();
        size += 4;
        size += 4;
        this.transactions.forEach(function (o) { return size += EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.serialize(o).length; });
        this.cosignatures.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    AggregateTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var transactionsHashBytes = this.transactionsHash.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, transactionsHashBytes);
        var payloadSizeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.getEmbeddedTransactionSize(this.transactions), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, payloadSizeBytes);
        var aggregateTransactionHeader_Reserved1Bytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getAggregateTransactionHeader_Reserved1(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, aggregateTransactionHeader_Reserved1Bytes);
        this.transactions.forEach(function (item) {
            var transactionsBytes = EmbeddedTransactionHelper_1.EmbeddedTransactionHelper.serialize(item);
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, transactionsBytes);
        });
        this.cosignatures.forEach(function (item) {
            var cosignaturesBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignaturesBytes);
        });
        return newArray;
    };
    return AggregateTransactionBodyBuilder;
}());
exports.AggregateTransactionBodyBuilder = AggregateTransactionBodyBuilder;
//# sourceMappingURL=AggregateTransactionBodyBuilder.js.map