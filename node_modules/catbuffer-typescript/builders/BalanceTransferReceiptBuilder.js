"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AddressDto_1 = require("./AddressDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var MosaicBuilder_1 = require("./MosaicBuilder");
var ReceiptBuilder_1 = require("./ReceiptBuilder");
var BalanceTransferReceiptBuilder = (function (_super) {
    __extends(BalanceTransferReceiptBuilder, _super);
    function BalanceTransferReceiptBuilder(version, type, mosaic, senderPublicKey, recipientAddress) {
        var _this = _super.call(this, version, type) || this;
        _this.mosaic = mosaic;
        _this.senderPublicKey = senderPublicKey;
        _this.recipientAddress = recipientAddress;
        return _this;
    }
    BalanceTransferReceiptBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = ReceiptBuilder_1.ReceiptBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var mosaic = MosaicBuilder_1.MosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaic.getSize());
        var senderPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, senderPublicKey.getSize());
        var recipientAddress = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, recipientAddress.getSize());
        return new BalanceTransferReceiptBuilder(superObject.version, superObject.type, mosaic, senderPublicKey, recipientAddress);
    };
    BalanceTransferReceiptBuilder.prototype.getMosaic = function () {
        return this.mosaic;
    };
    BalanceTransferReceiptBuilder.prototype.getSenderPublicKey = function () {
        return this.senderPublicKey;
    };
    BalanceTransferReceiptBuilder.prototype.getRecipientAddress = function () {
        return this.recipientAddress;
    };
    BalanceTransferReceiptBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.mosaic.getSize();
        size += this.senderPublicKey.getSize();
        size += this.recipientAddress.getSize();
        return size;
    };
    BalanceTransferReceiptBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var mosaicBytes = this.mosaic.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicBytes);
        var senderPublicKeyBytes = this.senderPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, senderPublicKeyBytes);
        var recipientAddressBytes = this.recipientAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, recipientAddressBytes);
        return newArray;
    };
    return BalanceTransferReceiptBuilder;
}(ReceiptBuilder_1.ReceiptBuilder));
exports.BalanceTransferReceiptBuilder = BalanceTransferReceiptBuilder;
//# sourceMappingURL=BalanceTransferReceiptBuilder.js.map