"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var SignatureDto_1 = require("./SignatureDto");
var CosignatureBuilder = (function () {
    function CosignatureBuilder(signerPublicKey, signature) {
        this.signerPublicKey = signerPublicKey;
        this.signature = signature;
    }
    CosignatureBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var signerPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, signerPublicKey.getSize());
        var signature = SignatureDto_1.SignatureDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, signature.getSize());
        return new CosignatureBuilder(signerPublicKey, signature);
    };
    CosignatureBuilder.prototype.getSignerPublicKey = function () {
        return this.signerPublicKey;
    };
    CosignatureBuilder.prototype.getSignature = function () {
        return this.signature;
    };
    CosignatureBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.signerPublicKey.getSize();
        size += this.signature.getSize();
        return size;
    };
    CosignatureBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var signerPublicKeyBytes = this.signerPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, signerPublicKeyBytes);
        var signatureBytes = this.signature.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, signatureBytes);
        return newArray;
    };
    return CosignatureBuilder;
}());
exports.CosignatureBuilder = CosignatureBuilder;
//# sourceMappingURL=CosignatureBuilder.js.map