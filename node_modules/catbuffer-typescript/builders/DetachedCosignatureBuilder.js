"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CosignatureBuilder_1 = require("./CosignatureBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var DetachedCosignatureBuilder = (function (_super) {
    __extends(DetachedCosignatureBuilder, _super);
    function DetachedCosignatureBuilder(signerPublicKey, signature, parentHash) {
        var _this = _super.call(this, signerPublicKey, signature) || this;
        _this.parentHash = parentHash;
        return _this;
    }
    DetachedCosignatureBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = CosignatureBuilder_1.CosignatureBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var parentHash = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, parentHash.getSize());
        return new DetachedCosignatureBuilder(superObject.signerPublicKey, superObject.signature, parentHash);
    };
    DetachedCosignatureBuilder.prototype.getParentHash = function () {
        return this.parentHash;
    };
    DetachedCosignatureBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.parentHash.getSize();
        return size;
    };
    DetachedCosignatureBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var parentHashBytes = this.parentHash.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, parentHashBytes);
        return newArray;
    };
    return DetachedCosignatureBuilder;
}(CosignatureBuilder_1.CosignatureBuilder));
exports.DetachedCosignatureBuilder = DetachedCosignatureBuilder;
//# sourceMappingURL=DetachedCosignatureBuilder.js.map