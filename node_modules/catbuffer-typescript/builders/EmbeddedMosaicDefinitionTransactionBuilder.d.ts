import { BlockDurationDto } from './BlockDurationDto';
import { EmbeddedTransactionBuilder } from './EmbeddedTransactionBuilder';
import { EntityTypeDto } from './EntityTypeDto';
import { KeyDto } from './KeyDto';
import { MosaicDefinitionTransactionBodyBuilder } from './MosaicDefinitionTransactionBodyBuilder';
import { MosaicIdDto } from './MosaicIdDto';
import { MosaicNonceDto } from './MosaicNonceDto';
import { NetworkTypeDto } from './NetworkTypeDto';
export declare class EmbeddedMosaicDefinitionTransactionBuilder extends EmbeddedTransactionBuilder {
    mosaicDefinitionTransactionBody: MosaicDefinitionTransactionBodyBuilder;
    constructor(signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, id: MosaicIdDto, duration: BlockDurationDto, nonce: MosaicNonceDto, flags: number, divisibility: number);
    static loadFromBinary(payload: Uint8Array): EmbeddedMosaicDefinitionTransactionBuilder;
    getId(): MosaicIdDto;
    getDuration(): BlockDurationDto;
    getNonce(): MosaicNonceDto;
    getFlags(): number;
    getDivisibility(): number;
    getSize(): number;
    serialize(): Uint8Array;
}
