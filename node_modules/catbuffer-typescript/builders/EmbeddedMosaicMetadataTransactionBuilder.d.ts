import { EmbeddedTransactionBuilder } from './EmbeddedTransactionBuilder';
import { EntityTypeDto } from './EntityTypeDto';
import { KeyDto } from './KeyDto';
import { MosaicMetadataTransactionBodyBuilder } from './MosaicMetadataTransactionBodyBuilder';
import { NetworkTypeDto } from './NetworkTypeDto';
import { UnresolvedMosaicIdDto } from './UnresolvedMosaicIdDto';
export declare class EmbeddedMosaicMetadataTransactionBuilder extends EmbeddedTransactionBuilder {
    mosaicMetadataTransactionBody: MosaicMetadataTransactionBodyBuilder;
    constructor(signerPublicKey: KeyDto, version: number, network: NetworkTypeDto, type: EntityTypeDto, targetPublicKey: KeyDto, scopedMetadataKey: number[], targetMosaicId: UnresolvedMosaicIdDto, valueSizeDelta: number, value: Uint8Array);
    static loadFromBinary(payload: Uint8Array): EmbeddedMosaicMetadataTransactionBuilder;
    getTargetPublicKey(): KeyDto;
    getScopedMetadataKey(): number[];
    getTargetMosaicId(): UnresolvedMosaicIdDto;
    getValueSizeDelta(): number;
    getValue(): Uint8Array;
    getSize(): number;
    serialize(): Uint8Array;
}
