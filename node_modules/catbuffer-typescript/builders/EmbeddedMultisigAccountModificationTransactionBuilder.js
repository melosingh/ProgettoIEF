"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EmbeddedTransactionBuilder_1 = require("./EmbeddedTransactionBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var MultisigAccountModificationTransactionBodyBuilder_1 = require("./MultisigAccountModificationTransactionBodyBuilder");
var EmbeddedMultisigAccountModificationTransactionBuilder = (function (_super) {
    __extends(EmbeddedMultisigAccountModificationTransactionBuilder, _super);
    function EmbeddedMultisigAccountModificationTransactionBuilder(signerPublicKey, version, network, type, minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions) {
        var _this = _super.call(this, signerPublicKey, version, network, type) || this;
        _this.multisigAccountModificationTransactionBody = new MultisigAccountModificationTransactionBodyBuilder_1.MultisigAccountModificationTransactionBodyBuilder(minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions);
        return _this;
    }
    EmbeddedMultisigAccountModificationTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = EmbeddedTransactionBuilder_1.EmbeddedTransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var multisigAccountModificationTransactionBody = MultisigAccountModificationTransactionBodyBuilder_1.MultisigAccountModificationTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, multisigAccountModificationTransactionBody.getSize());
        return new EmbeddedMultisigAccountModificationTransactionBuilder(superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, multisigAccountModificationTransactionBody.minRemovalDelta, multisigAccountModificationTransactionBody.minApprovalDelta, multisigAccountModificationTransactionBody.publicKeyAdditions, multisigAccountModificationTransactionBody.publicKeyDeletions);
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getMinRemovalDelta = function () {
        return this.multisigAccountModificationTransactionBody.getMinRemovalDelta();
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getMinApprovalDelta = function () {
        return this.multisigAccountModificationTransactionBody.getMinApprovalDelta();
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getMultisigAccountModificationTransactionBody_Reserved1 = function () {
        return this.multisigAccountModificationTransactionBody.getMultisigAccountModificationTransactionBody_Reserved1();
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getPublicKeyAdditions = function () {
        return this.multisigAccountModificationTransactionBody.getPublicKeyAdditions();
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getPublicKeyDeletions = function () {
        return this.multisigAccountModificationTransactionBody.getPublicKeyDeletions();
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.multisigAccountModificationTransactionBody.getSize();
        return size;
    };
    EmbeddedMultisigAccountModificationTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var multisigAccountModificationTransactionBodyBytes = this.multisigAccountModificationTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigAccountModificationTransactionBodyBytes);
        return newArray;
    };
    return EmbeddedMultisigAccountModificationTransactionBuilder;
}(EmbeddedTransactionBuilder_1.EmbeddedTransactionBuilder));
exports.EmbeddedMultisigAccountModificationTransactionBuilder = EmbeddedMultisigAccountModificationTransactionBuilder;
//# sourceMappingURL=EmbeddedMultisigAccountModificationTransactionBuilder.js.map