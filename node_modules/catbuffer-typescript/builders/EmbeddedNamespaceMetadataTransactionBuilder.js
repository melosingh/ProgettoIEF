"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EmbeddedTransactionBuilder_1 = require("./EmbeddedTransactionBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var NamespaceMetadataTransactionBodyBuilder_1 = require("./NamespaceMetadataTransactionBodyBuilder");
var EmbeddedNamespaceMetadataTransactionBuilder = (function (_super) {
    __extends(EmbeddedNamespaceMetadataTransactionBuilder, _super);
    function EmbeddedNamespaceMetadataTransactionBuilder(signerPublicKey, version, network, type, targetPublicKey, scopedMetadataKey, targetNamespaceId, valueSizeDelta, value) {
        var _this = _super.call(this, signerPublicKey, version, network, type) || this;
        _this.namespaceMetadataTransactionBody = new NamespaceMetadataTransactionBodyBuilder_1.NamespaceMetadataTransactionBodyBuilder(targetPublicKey, scopedMetadataKey, targetNamespaceId, valueSizeDelta, value);
        return _this;
    }
    EmbeddedNamespaceMetadataTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = EmbeddedTransactionBuilder_1.EmbeddedTransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var namespaceMetadataTransactionBody = NamespaceMetadataTransactionBodyBuilder_1.NamespaceMetadataTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, namespaceMetadataTransactionBody.getSize());
        return new EmbeddedNamespaceMetadataTransactionBuilder(superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, namespaceMetadataTransactionBody.targetPublicKey, namespaceMetadataTransactionBody.scopedMetadataKey, namespaceMetadataTransactionBody.targetNamespaceId, namespaceMetadataTransactionBody.valueSizeDelta, namespaceMetadataTransactionBody.value);
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getTargetPublicKey = function () {
        return this.namespaceMetadataTransactionBody.getTargetPublicKey();
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getScopedMetadataKey = function () {
        return this.namespaceMetadataTransactionBody.getScopedMetadataKey();
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getTargetNamespaceId = function () {
        return this.namespaceMetadataTransactionBody.getTargetNamespaceId();
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getValueSizeDelta = function () {
        return this.namespaceMetadataTransactionBody.getValueSizeDelta();
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getValue = function () {
        return this.namespaceMetadataTransactionBody.getValue();
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.namespaceMetadataTransactionBody.getSize();
        return size;
    };
    EmbeddedNamespaceMetadataTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var namespaceMetadataTransactionBodyBytes = this.namespaceMetadataTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, namespaceMetadataTransactionBodyBytes);
        return newArray;
    };
    return EmbeddedNamespaceMetadataTransactionBuilder;
}(EmbeddedTransactionBuilder_1.EmbeddedTransactionBuilder));
exports.EmbeddedNamespaceMetadataTransactionBuilder = EmbeddedNamespaceMetadataTransactionBuilder;
//# sourceMappingURL=EmbeddedNamespaceMetadataTransactionBuilder.js.map