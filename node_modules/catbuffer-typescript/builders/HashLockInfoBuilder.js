"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var HeightDto_1 = require("./HeightDto");
var KeyDto_1 = require("./KeyDto");
var MosaicBuilder_1 = require("./MosaicBuilder");
var HashLockInfoBuilder = (function () {
    function HashLockInfoBuilder(senderPublicKey, mosaic, endHeight, status, hash) {
        this.senderPublicKey = senderPublicKey;
        this.mosaic = mosaic;
        this.endHeight = endHeight;
        this.status = status;
        this.hash = hash;
    }
    HashLockInfoBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var senderPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, senderPublicKey.getSize());
        var mosaic = MosaicBuilder_1.MosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaic.getSize());
        var endHeight = HeightDto_1.HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, endHeight.getSize());
        var status = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var hash = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, hash.getSize());
        return new HashLockInfoBuilder(senderPublicKey, mosaic, endHeight, status, hash);
    };
    HashLockInfoBuilder.prototype.getSenderPublicKey = function () {
        return this.senderPublicKey;
    };
    HashLockInfoBuilder.prototype.getMosaic = function () {
        return this.mosaic;
    };
    HashLockInfoBuilder.prototype.getEndHeight = function () {
        return this.endHeight;
    };
    HashLockInfoBuilder.prototype.getStatus = function () {
        return this.status;
    };
    HashLockInfoBuilder.prototype.getHash = function () {
        return this.hash;
    };
    HashLockInfoBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.senderPublicKey.getSize();
        size += this.mosaic.getSize();
        size += this.endHeight.getSize();
        size += 1;
        size += this.hash.getSize();
        return size;
    };
    HashLockInfoBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var senderPublicKeyBytes = this.senderPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, senderPublicKeyBytes);
        var mosaicBytes = this.mosaic.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicBytes);
        var endHeightBytes = this.endHeight.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, endHeightBytes);
        var statusBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.status, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, statusBytes);
        var hashBytes = this.hash.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, hashBytes);
        return newArray;
    };
    return HashLockInfoBuilder;
}());
exports.HashLockInfoBuilder = HashLockInfoBuilder;
//# sourceMappingURL=HashLockInfoBuilder.js.map