"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BlockDurationDto_1 = require("./BlockDurationDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var UnresolvedMosaicBuilder_1 = require("./UnresolvedMosaicBuilder");
var HashLockTransactionBodyBuilder = (function () {
    function HashLockTransactionBodyBuilder(mosaic, duration, hash) {
        this.mosaic = mosaic;
        this.duration = duration;
        this.hash = hash;
    }
    HashLockTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var mosaic = UnresolvedMosaicBuilder_1.UnresolvedMosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaic.getSize());
        var duration = BlockDurationDto_1.BlockDurationDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, duration.getSize());
        var hash = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, hash.getSize());
        return new HashLockTransactionBodyBuilder(mosaic, duration, hash);
    };
    HashLockTransactionBodyBuilder.prototype.getMosaic = function () {
        return this.mosaic;
    };
    HashLockTransactionBodyBuilder.prototype.getDuration = function () {
        return this.duration;
    };
    HashLockTransactionBodyBuilder.prototype.getHash = function () {
        return this.hash;
    };
    HashLockTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.mosaic.getSize();
        size += this.duration.getSize();
        size += this.hash.getSize();
        return size;
    };
    HashLockTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var mosaicBytes = this.mosaic.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicBytes);
        var durationBytes = this.duration.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, durationBytes);
        var hashBytes = this.hash.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, hashBytes);
        return newArray;
    };
    return HashLockTransactionBodyBuilder;
}());
exports.HashLockTransactionBodyBuilder = HashLockTransactionBodyBuilder;
//# sourceMappingURL=HashLockTransactionBodyBuilder.js.map