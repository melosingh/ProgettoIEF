"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var MetadataValueBuilder_1 = require("./MetadataValueBuilder");
var ScopedMetadataKeyDto_1 = require("./ScopedMetadataKeyDto");
var MetadataEntryBuilder = (function () {
    function MetadataEntryBuilder(sourcePublicKey, targetPublicKey, scopedMetadataKey, targetId, metadataType, value) {
        this.sourcePublicKey = sourcePublicKey;
        this.targetPublicKey = targetPublicKey;
        this.scopedMetadataKey = scopedMetadataKey;
        this.targetId = targetId;
        this.metadataType = metadataType;
        this.value = value;
    }
    MetadataEntryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var sourcePublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, sourcePublicKey.getSize());
        var targetPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, targetPublicKey.getSize());
        var scopedMetadataKey = ScopedMetadataKeyDto_1.ScopedMetadataKeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, scopedMetadataKey.getSize());
        var targetId = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        var metadataType = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var value = MetadataValueBuilder_1.MetadataValueBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, value.getSize());
        return new MetadataEntryBuilder(sourcePublicKey, targetPublicKey, scopedMetadataKey, targetId, metadataType, value);
    };
    MetadataEntryBuilder.prototype.getSourcePublicKey = function () {
        return this.sourcePublicKey;
    };
    MetadataEntryBuilder.prototype.getTargetPublicKey = function () {
        return this.targetPublicKey;
    };
    MetadataEntryBuilder.prototype.getScopedMetadataKey = function () {
        return this.scopedMetadataKey;
    };
    MetadataEntryBuilder.prototype.getTargetId = function () {
        return this.targetId;
    };
    MetadataEntryBuilder.prototype.getMetadataType = function () {
        return this.metadataType;
    };
    MetadataEntryBuilder.prototype.getValue = function () {
        return this.value;
    };
    MetadataEntryBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.sourcePublicKey.getSize();
        size += this.targetPublicKey.getSize();
        size += this.scopedMetadataKey.getSize();
        size += 8;
        size += 1;
        size += this.value.getSize();
        return size;
    };
    MetadataEntryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var sourcePublicKeyBytes = this.sourcePublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, sourcePublicKeyBytes);
        var targetPublicKeyBytes = this.targetPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, targetPublicKeyBytes);
        var scopedMetadataKeyBytes = this.scopedMetadataKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, scopedMetadataKeyBytes);
        var targetIdBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(this.getTargetId());
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, targetIdBytes);
        var metadataTypeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.metadataType, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, metadataTypeBytes);
        var valueBytes = this.value.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, valueBytes);
        return newArray;
    };
    return MetadataEntryBuilder;
}());
exports.MetadataEntryBuilder = MetadataEntryBuilder;
//# sourceMappingURL=MetadataEntryBuilder.js.map