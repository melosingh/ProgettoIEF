"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AddressDto_1 = require("./AddressDto");
var AddressKeyValueSetBuilder_1 = require("./AddressKeyValueSetBuilder");
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicIdDto_1 = require("./MosaicIdDto");
var MosaicAddressRestrictionEntryBuilder = (function () {
    function MosaicAddressRestrictionEntryBuilder(mosaicId, address, keyPairs) {
        this.mosaicId = mosaicId;
        this.address = address;
        this.keyPairs = keyPairs;
    }
    MosaicAddressRestrictionEntryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var mosaicId = MosaicIdDto_1.MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaicId.getSize());
        var address = AddressDto_1.AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        var keyPairs = AddressKeyValueSetBuilder_1.AddressKeyValueSetBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, keyPairs.getSize());
        return new MosaicAddressRestrictionEntryBuilder(mosaicId, address, keyPairs);
    };
    MosaicAddressRestrictionEntryBuilder.prototype.getMosaicId = function () {
        return this.mosaicId;
    };
    MosaicAddressRestrictionEntryBuilder.prototype.getAddress = function () {
        return this.address;
    };
    MosaicAddressRestrictionEntryBuilder.prototype.getKeyPairs = function () {
        return this.keyPairs;
    };
    MosaicAddressRestrictionEntryBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.mosaicId.getSize();
        size += this.address.getSize();
        size += this.keyPairs.getSize();
        return size;
    };
    MosaicAddressRestrictionEntryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var mosaicIdBytes = this.mosaicId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicIdBytes);
        var addressBytes = this.address.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        var keyPairsBytes = this.keyPairs.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, keyPairsBytes);
        return newArray;
    };
    return MosaicAddressRestrictionEntryBuilder;
}());
exports.MosaicAddressRestrictionEntryBuilder = MosaicAddressRestrictionEntryBuilder;
//# sourceMappingURL=MosaicAddressRestrictionEntryBuilder.js.map