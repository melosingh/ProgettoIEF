"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicIdDto_1 = require("./MosaicIdDto");
var NamespaceIdDto_1 = require("./NamespaceIdDto");
var MosaicAliasTransactionBodyBuilder = (function () {
    function MosaicAliasTransactionBodyBuilder(namespaceId, mosaicId, aliasAction) {
        this.namespaceId = namespaceId;
        this.mosaicId = mosaicId;
        this.aliasAction = aliasAction;
    }
    MosaicAliasTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var namespaceId = NamespaceIdDto_1.NamespaceIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, namespaceId.getSize());
        var mosaicId = MosaicIdDto_1.MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaicId.getSize());
        var aliasAction = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        return new MosaicAliasTransactionBodyBuilder(namespaceId, mosaicId, aliasAction);
    };
    MosaicAliasTransactionBodyBuilder.prototype.getNamespaceId = function () {
        return this.namespaceId;
    };
    MosaicAliasTransactionBodyBuilder.prototype.getMosaicId = function () {
        return this.mosaicId;
    };
    MosaicAliasTransactionBodyBuilder.prototype.getAliasAction = function () {
        return this.aliasAction;
    };
    MosaicAliasTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.namespaceId.getSize();
        size += this.mosaicId.getSize();
        size += 1;
        return size;
    };
    MosaicAliasTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var namespaceIdBytes = this.namespaceId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, namespaceIdBytes);
        var mosaicIdBytes = this.mosaicId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicIdBytes);
        var aliasActionBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.aliasAction, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, aliasActionBytes);
        return newArray;
    };
    return MosaicAliasTransactionBodyBuilder;
}());
exports.MosaicAliasTransactionBodyBuilder = MosaicAliasTransactionBodyBuilder;
//# sourceMappingURL=MosaicAliasTransactionBodyBuilder.js.map