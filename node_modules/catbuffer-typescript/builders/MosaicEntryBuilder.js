"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AmountDto_1 = require("./AmountDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicDefinitionBuilder_1 = require("./MosaicDefinitionBuilder");
var MosaicIdDto_1 = require("./MosaicIdDto");
var MosaicEntryBuilder = (function () {
    function MosaicEntryBuilder(mosaicId, supply, definition) {
        this.mosaicId = mosaicId;
        this.supply = supply;
        this.definition = definition;
    }
    MosaicEntryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var mosaicId = MosaicIdDto_1.MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaicId.getSize());
        var supply = AmountDto_1.AmountDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, supply.getSize());
        var definition = MosaicDefinitionBuilder_1.MosaicDefinitionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, definition.getSize());
        return new MosaicEntryBuilder(mosaicId, supply, definition);
    };
    MosaicEntryBuilder.prototype.getMosaicId = function () {
        return this.mosaicId;
    };
    MosaicEntryBuilder.prototype.getSupply = function () {
        return this.supply;
    };
    MosaicEntryBuilder.prototype.getDefinition = function () {
        return this.definition;
    };
    MosaicEntryBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.mosaicId.getSize();
        size += this.supply.getSize();
        size += this.definition.getSize();
        return size;
    };
    MosaicEntryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var mosaicIdBytes = this.mosaicId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicIdBytes);
        var supplyBytes = this.supply.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, supplyBytes);
        var definitionBytes = this.definition.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, definitionBytes);
        return newArray;
    };
    return MosaicEntryBuilder;
}());
exports.MosaicEntryBuilder = MosaicEntryBuilder;
//# sourceMappingURL=MosaicEntryBuilder.js.map