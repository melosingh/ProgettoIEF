"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicMetadataTransactionBodyBuilder_1 = require("./MosaicMetadataTransactionBodyBuilder");
var TransactionBuilder_1 = require("./TransactionBuilder");
var MosaicMetadataTransactionBuilder = (function (_super) {
    __extends(MosaicMetadataTransactionBuilder, _super);
    function MosaicMetadataTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, targetPublicKey, scopedMetadataKey, targetMosaicId, valueSizeDelta, value) {
        var _this = _super.call(this, signature, signerPublicKey, version, network, type, fee, deadline) || this;
        _this.mosaicMetadataTransactionBody = new MosaicMetadataTransactionBodyBuilder_1.MosaicMetadataTransactionBodyBuilder(targetPublicKey, scopedMetadataKey, targetMosaicId, valueSizeDelta, value);
        return _this;
    }
    MosaicMetadataTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = TransactionBuilder_1.TransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var mosaicMetadataTransactionBody = MosaicMetadataTransactionBodyBuilder_1.MosaicMetadataTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaicMetadataTransactionBody.getSize());
        return new MosaicMetadataTransactionBuilder(superObject.signature, superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, superObject.fee, superObject.deadline, mosaicMetadataTransactionBody.targetPublicKey, mosaicMetadataTransactionBody.scopedMetadataKey, mosaicMetadataTransactionBody.targetMosaicId, mosaicMetadataTransactionBody.valueSizeDelta, mosaicMetadataTransactionBody.value);
    };
    MosaicMetadataTransactionBuilder.prototype.getTargetPublicKey = function () {
        return this.mosaicMetadataTransactionBody.getTargetPublicKey();
    };
    MosaicMetadataTransactionBuilder.prototype.getScopedMetadataKey = function () {
        return this.mosaicMetadataTransactionBody.getScopedMetadataKey();
    };
    MosaicMetadataTransactionBuilder.prototype.getTargetMosaicId = function () {
        return this.mosaicMetadataTransactionBody.getTargetMosaicId();
    };
    MosaicMetadataTransactionBuilder.prototype.getValueSizeDelta = function () {
        return this.mosaicMetadataTransactionBody.getValueSizeDelta();
    };
    MosaicMetadataTransactionBuilder.prototype.getValue = function () {
        return this.mosaicMetadataTransactionBody.getValue();
    };
    MosaicMetadataTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.mosaicMetadataTransactionBody.getSize();
        return size;
    };
    MosaicMetadataTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var mosaicMetadataTransactionBodyBytes = this.mosaicMetadataTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicMetadataTransactionBodyBytes);
        return newArray;
    };
    return MosaicMetadataTransactionBuilder;
}(TransactionBuilder_1.TransactionBuilder));
exports.MosaicMetadataTransactionBuilder = MosaicMetadataTransactionBuilder;
//# sourceMappingURL=MosaicMetadataTransactionBuilder.js.map