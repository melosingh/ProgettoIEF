"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BlockDurationDto_1 = require("./BlockDurationDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicPropertiesBuilder = (function () {
    function MosaicPropertiesBuilder(flags, divisibility, duration) {
        this.flags = flags;
        this.divisibility = divisibility;
        this.duration = duration;
    }
    MosaicPropertiesBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var flags = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var divisibility = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var duration = BlockDurationDto_1.BlockDurationDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, duration.getSize());
        return new MosaicPropertiesBuilder(flags, divisibility, duration);
    };
    MosaicPropertiesBuilder.prototype.getFlags = function () {
        return this.flags;
    };
    MosaicPropertiesBuilder.prototype.getDivisibility = function () {
        return this.divisibility;
    };
    MosaicPropertiesBuilder.prototype.getDuration = function () {
        return this.duration;
    };
    MosaicPropertiesBuilder.prototype.getSize = function () {
        var size = 0;
        size += 1;
        size += 1;
        size += this.duration.getSize();
        return size;
    };
    MosaicPropertiesBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var flagsBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getFlags(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, flagsBytes);
        var divisibilityBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getDivisibility(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, divisibilityBytes);
        var durationBytes = this.duration.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, durationBytes);
        return newArray;
    };
    return MosaicPropertiesBuilder;
}());
exports.MosaicPropertiesBuilder = MosaicPropertiesBuilder;
//# sourceMappingURL=MosaicPropertiesBuilder.js.map