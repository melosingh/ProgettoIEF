"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicAddressRestrictionEntryBuilder_1 = require("./MosaicAddressRestrictionEntryBuilder");
var MosaicGlobalRestrictionEntryBuilder_1 = require("./MosaicGlobalRestrictionEntryBuilder");
var MosaicRestrictionEntryTypeDto_1 = require("./MosaicRestrictionEntryTypeDto");
var MosaicRestrictionEntryBuilder = (function () {
    function MosaicRestrictionEntryBuilder(addressEntry, globalEntry) {
        if ((addressEntry && globalEntry) || (!addressEntry && !globalEntry)) {
            throw new Error('Invalid conditional parameters');
        }
        this.addressEntry = addressEntry;
        this.globalEntry = globalEntry;
        if (addressEntry) {
            this.entryType = MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.ADDRESS;
        }
        else {
            this.entryType = MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.GLOBAL;
        }
    }
    MosaicRestrictionEntryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var entryType = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var entryTypeConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        var addressEntry;
        if (entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.ADDRESS) {
            addressEntry = MosaicAddressRestrictionEntryBuilder_1.MosaicAddressRestrictionEntryBuilder.loadFromBinary(entryTypeConditionBytes);
        }
        var globalEntry;
        if (entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.GLOBAL) {
            globalEntry = MosaicGlobalRestrictionEntryBuilder_1.MosaicGlobalRestrictionEntryBuilder.loadFromBinary(entryTypeConditionBytes);
        }
        return new MosaicRestrictionEntryBuilder(addressEntry, globalEntry);
    };
    MosaicRestrictionEntryBuilder.prototype.getEntryType = function () {
        return this.entryType;
    };
    MosaicRestrictionEntryBuilder.prototype.getAddressEntry = function () {
        if (this.entryType !== MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.ADDRESS) {
            throw new Error('entryType is not set to ADDRESS.');
        }
        return this.addressEntry;
    };
    MosaicRestrictionEntryBuilder.prototype.getGlobalEntry = function () {
        if (this.entryType !== MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.GLOBAL) {
            throw new Error('entryType is not set to GLOBAL.');
        }
        return this.globalEntry;
    };
    MosaicRestrictionEntryBuilder.prototype.getSize = function () {
        var size = 0;
        size += 1;
        if (this.entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.ADDRESS) {
            size += this.addressEntry.getSize();
        }
        if (this.entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.GLOBAL) {
            size += this.globalEntry.getSize();
        }
        return size;
    };
    MosaicRestrictionEntryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var entryTypeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.entryType, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, entryTypeBytes);
        if (this.entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.ADDRESS) {
            var addressEntryBytes = this.addressEntry.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressEntryBytes);
        }
        if (this.entryType === MosaicRestrictionEntryTypeDto_1.MosaicRestrictionEntryTypeDto.GLOBAL) {
            var globalEntryBytes = this.globalEntry.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, globalEntryBytes);
        }
        return newArray;
    };
    return MosaicRestrictionEntryBuilder;
}());
exports.MosaicRestrictionEntryBuilder = MosaicRestrictionEntryBuilder;
//# sourceMappingURL=MosaicRestrictionEntryBuilder.js.map