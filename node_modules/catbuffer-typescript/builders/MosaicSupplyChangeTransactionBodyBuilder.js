"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AmountDto_1 = require("./AmountDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var UnresolvedMosaicIdDto_1 = require("./UnresolvedMosaicIdDto");
var MosaicSupplyChangeTransactionBodyBuilder = (function () {
    function MosaicSupplyChangeTransactionBodyBuilder(mosaicId, delta, action) {
        this.mosaicId = mosaicId;
        this.delta = delta;
        this.action = action;
    }
    MosaicSupplyChangeTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var mosaicId = UnresolvedMosaicIdDto_1.UnresolvedMosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaicId.getSize());
        var delta = AmountDto_1.AmountDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, delta.getSize());
        var action = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        return new MosaicSupplyChangeTransactionBodyBuilder(mosaicId, delta, action);
    };
    MosaicSupplyChangeTransactionBodyBuilder.prototype.getMosaicId = function () {
        return this.mosaicId;
    };
    MosaicSupplyChangeTransactionBodyBuilder.prototype.getDelta = function () {
        return this.delta;
    };
    MosaicSupplyChangeTransactionBodyBuilder.prototype.getAction = function () {
        return this.action;
    };
    MosaicSupplyChangeTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.mosaicId.getSize();
        size += this.delta.getSize();
        size += 1;
        return size;
    };
    MosaicSupplyChangeTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var mosaicIdBytes = this.mosaicId.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicIdBytes);
        var deltaBytes = this.delta.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, deltaBytes);
        var actionBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.action, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, actionBytes);
        return newArray;
    };
    return MosaicSupplyChangeTransactionBodyBuilder;
}());
exports.MosaicSupplyChangeTransactionBodyBuilder = MosaicSupplyChangeTransactionBodyBuilder;
//# sourceMappingURL=MosaicSupplyChangeTransactionBodyBuilder.js.map