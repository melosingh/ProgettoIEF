"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var MultisigAccountModificationTransactionBodyBuilder = (function () {
    function MultisigAccountModificationTransactionBodyBuilder(minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions) {
        this.minRemovalDelta = minRemovalDelta;
        this.minApprovalDelta = minApprovalDelta;
        this.multisigAccountModificationTransactionBody_Reserved1 = 0;
        this.publicKeyAdditions = publicKeyAdditions;
        this.publicKeyDeletions = publicKeyDeletions;
    }
    MultisigAccountModificationTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var minRemovalDelta = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var minApprovalDelta = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var publicKeyAdditionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var publicKeyDeletionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var multisigAccountModificationTransactionBody_Reserved1 = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var publicKeyAdditions = [];
        for (var i = 0; i < (Array.isArray(publicKeyAdditionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(publicKeyAdditionsCount) : publicKeyAdditionsCount); i++) {
            var item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            publicKeyAdditions.push(item);
            byteArray.splice(0, item.getSize());
        }
        var publicKeyDeletions = [];
        for (var i = 0; i < (Array.isArray(publicKeyDeletionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(publicKeyDeletionsCount) : publicKeyDeletionsCount); i++) {
            var item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            publicKeyDeletions.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigAccountModificationTransactionBodyBuilder(minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions);
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getMinRemovalDelta = function () {
        return this.minRemovalDelta;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getMinApprovalDelta = function () {
        return this.minApprovalDelta;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getMultisigAccountModificationTransactionBody_Reserved1 = function () {
        return this.multisigAccountModificationTransactionBody_Reserved1;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getPublicKeyAdditions = function () {
        return this.publicKeyAdditions;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getPublicKeyDeletions = function () {
        return this.publicKeyDeletions;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += 1;
        size += 1;
        size += 1;
        size += 1;
        size += 4;
        this.publicKeyAdditions.forEach(function (o) { return size += o.getSize(); });
        this.publicKeyDeletions.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    MultisigAccountModificationTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var minRemovalDeltaBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinRemovalDelta(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minRemovalDeltaBytes);
        var minApprovalDeltaBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinApprovalDelta(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minApprovalDeltaBytes);
        var publicKeyAdditionsCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.publicKeyAdditions.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyAdditionsCountBytes);
        var publicKeyDeletionsCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.publicKeyDeletions.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyDeletionsCountBytes);
        var multisigAccountModificationTransactionBody_Reserved1Bytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMultisigAccountModificationTransactionBody_Reserved1(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigAccountModificationTransactionBody_Reserved1Bytes);
        this.publicKeyAdditions.forEach(function (item) {
            var publicKeyAdditionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyAdditionsBytes);
        });
        this.publicKeyDeletions.forEach(function (item) {
            var publicKeyDeletionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyDeletionsBytes);
        });
        return newArray;
    };
    return MultisigAccountModificationTransactionBodyBuilder;
}());
exports.MultisigAccountModificationTransactionBodyBuilder = MultisigAccountModificationTransactionBodyBuilder;
//# sourceMappingURL=MultisigAccountModificationTransactionBodyBuilder.js.map