"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var MultisigEntryBuilder = (function () {
    function MultisigEntryBuilder(minApproval, minRemoval, accountPublicKey, cosignatoryPublicKeys, multisigPublicKeys) {
        this.minApproval = minApproval;
        this.minRemoval = minRemoval;
        this.accountPublicKey = accountPublicKey;
        this.cosignatoryPublicKeys = cosignatoryPublicKeys;
        this.multisigPublicKeys = multisigPublicKeys;
    }
    MultisigEntryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var minApproval = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var minRemoval = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var accountPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, accountPublicKey.getSize());
        var cosignatoryPublicKeysCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        var cosignatoryPublicKeys = [];
        for (var i = 0; i < (Array.isArray(cosignatoryPublicKeysCount) ? GeneratorUtils_1.GeneratorUtils.compact(cosignatoryPublicKeysCount) : cosignatoryPublicKeysCount); i++) {
            var item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            cosignatoryPublicKeys.push(item);
            byteArray.splice(0, item.getSize());
        }
        var multisigPublicKeysCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        var multisigPublicKeys = [];
        for (var i = 0; i < (Array.isArray(multisigPublicKeysCount) ? GeneratorUtils_1.GeneratorUtils.compact(multisigPublicKeysCount) : multisigPublicKeysCount); i++) {
            var item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            multisigPublicKeys.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigEntryBuilder(minApproval, minRemoval, accountPublicKey, cosignatoryPublicKeys, multisigPublicKeys);
    };
    MultisigEntryBuilder.prototype.getMinApproval = function () {
        return this.minApproval;
    };
    MultisigEntryBuilder.prototype.getMinRemoval = function () {
        return this.minRemoval;
    };
    MultisigEntryBuilder.prototype.getAccountPublicKey = function () {
        return this.accountPublicKey;
    };
    MultisigEntryBuilder.prototype.getCosignatoryPublicKeys = function () {
        return this.cosignatoryPublicKeys;
    };
    MultisigEntryBuilder.prototype.getMultisigPublicKeys = function () {
        return this.multisigPublicKeys;
    };
    MultisigEntryBuilder.prototype.getSize = function () {
        var size = 0;
        size += 4;
        size += 4;
        size += this.accountPublicKey.getSize();
        size += 8;
        this.cosignatoryPublicKeys.forEach(function (o) { return size += o.getSize(); });
        size += 8;
        this.multisigPublicKeys.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    MultisigEntryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var minApprovalBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinApproval(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minApprovalBytes);
        var minRemovalBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinRemoval(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minRemovalBytes);
        var accountPublicKeyBytes = this.accountPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, accountPublicKeyBytes);
        var cosignatoryPublicKeysCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.cosignatoryPublicKeys.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignatoryPublicKeysCountBytes);
        this.cosignatoryPublicKeys.forEach(function (item) {
            var cosignatoryPublicKeysBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, cosignatoryPublicKeysBytes);
        });
        var multisigPublicKeysCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.multisigPublicKeys.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigPublicKeysCountBytes);
        this.multisigPublicKeys.forEach(function (item) {
            var multisigPublicKeysBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigPublicKeysBytes);
        });
        return newArray;
    };
    return MultisigEntryBuilder;
}());
exports.MultisigEntryBuilder = MultisigEntryBuilder;
//# sourceMappingURL=MultisigEntryBuilder.js.map