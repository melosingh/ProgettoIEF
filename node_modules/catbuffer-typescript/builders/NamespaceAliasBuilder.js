"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AddressDto_1 = require("./AddressDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var MosaicIdDto_1 = require("./MosaicIdDto");
var NamespaceAliasTypeDto_1 = require("./NamespaceAliasTypeDto");
var NamespaceAliasBuilder = (function () {
    function NamespaceAliasBuilder(mosaicAlias, addressAlias) {
        if ((mosaicAlias && addressAlias) || (!mosaicAlias && !addressAlias)) {
            throw new Error('Invalid conditional parameters');
        }
        this.mosaicAlias = mosaicAlias;
        this.addressAlias = addressAlias;
        if (mosaicAlias) {
            this.namespaceAliasType = NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.MOSAIC_ID;
        }
        else {
            this.namespaceAliasType = NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.ADDRESS;
        }
    }
    NamespaceAliasBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var namespaceAliasType = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var namespaceAliasTypeConditionBytes = Uint8Array.from(byteArray.slice(0, 8));
        byteArray.splice(0, 8);
        var mosaicAlias;
        if (namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.MOSAIC_ID) {
            mosaicAlias = MosaicIdDto_1.MosaicIdDto.loadFromBinary(namespaceAliasTypeConditionBytes);
        }
        var addressAlias;
        if (namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.ADDRESS) {
            addressAlias = AddressDto_1.AddressDto.loadFromBinary(namespaceAliasTypeConditionBytes);
        }
        return new NamespaceAliasBuilder(mosaicAlias, addressAlias);
    };
    NamespaceAliasBuilder.prototype.getNamespaceAliasType = function () {
        return this.namespaceAliasType;
    };
    NamespaceAliasBuilder.prototype.getMosaicAlias = function () {
        if (this.namespaceAliasType !== NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.MOSAIC_ID) {
            throw new Error('namespaceAliasType is not set to MOSAIC_ID.');
        }
        return this.mosaicAlias;
    };
    NamespaceAliasBuilder.prototype.getAddressAlias = function () {
        if (this.namespaceAliasType !== NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.ADDRESS) {
            throw new Error('namespaceAliasType is not set to ADDRESS.');
        }
        return this.addressAlias;
    };
    NamespaceAliasBuilder.prototype.getSize = function () {
        var size = 0;
        size += 1;
        if (this.namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.MOSAIC_ID) {
            size += this.mosaicAlias.getSize();
        }
        if (this.namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.ADDRESS) {
            size += this.addressAlias.getSize();
        }
        return size;
    };
    NamespaceAliasBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var namespaceAliasTypeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.namespaceAliasType, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, namespaceAliasTypeBytes);
        if (this.namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.MOSAIC_ID) {
            var mosaicAliasBytes = this.mosaicAlias.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicAliasBytes);
        }
        if (this.namespaceAliasType === NamespaceAliasTypeDto_1.NamespaceAliasTypeDto.ADDRESS) {
            var addressAliasBytes = this.addressAlias.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, addressAliasBytes);
        }
        return newArray;
    };
    return NamespaceAliasBuilder;
}());
exports.NamespaceAliasBuilder = NamespaceAliasBuilder;
//# sourceMappingURL=NamespaceAliasBuilder.js.map