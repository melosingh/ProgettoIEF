"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var NamespaceRegistrationTransactionBodyBuilder_1 = require("./NamespaceRegistrationTransactionBodyBuilder");
var TransactionBuilder_1 = require("./TransactionBuilder");
var NamespaceRegistrationTransactionBuilder = (function (_super) {
    __extends(NamespaceRegistrationTransactionBuilder, _super);
    function NamespaceRegistrationTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, id, name, duration, parentId) {
        var _this = _super.call(this, signature, signerPublicKey, version, network, type, fee, deadline) || this;
        if ((duration && parentId) || (!duration && !parentId)) {
            throw new Error('Invalid conditional parameters');
        }
        _this.namespaceRegistrationTransactionBody = new NamespaceRegistrationTransactionBodyBuilder_1.NamespaceRegistrationTransactionBodyBuilder(id, name, duration, parentId);
        return _this;
    }
    NamespaceRegistrationTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = TransactionBuilder_1.TransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var namespaceRegistrationTransactionBody = NamespaceRegistrationTransactionBodyBuilder_1.NamespaceRegistrationTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, namespaceRegistrationTransactionBody.getSize());
        return new NamespaceRegistrationTransactionBuilder(superObject.signature, superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, superObject.fee, superObject.deadline, namespaceRegistrationTransactionBody.id, namespaceRegistrationTransactionBody.name, namespaceRegistrationTransactionBody.duration, namespaceRegistrationTransactionBody.parentId);
    };
    NamespaceRegistrationTransactionBuilder.prototype.getDuration = function () {
        return this.namespaceRegistrationTransactionBody.getDuration();
    };
    NamespaceRegistrationTransactionBuilder.prototype.getParentId = function () {
        return this.namespaceRegistrationTransactionBody.getParentId();
    };
    NamespaceRegistrationTransactionBuilder.prototype.getId = function () {
        return this.namespaceRegistrationTransactionBody.getId();
    };
    NamespaceRegistrationTransactionBuilder.prototype.getRegistrationType = function () {
        return this.namespaceRegistrationTransactionBody.getRegistrationType();
    };
    NamespaceRegistrationTransactionBuilder.prototype.getName = function () {
        return this.namespaceRegistrationTransactionBody.getName();
    };
    NamespaceRegistrationTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.namespaceRegistrationTransactionBody.getSize();
        return size;
    };
    NamespaceRegistrationTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var namespaceRegistrationTransactionBodyBytes = this.namespaceRegistrationTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, namespaceRegistrationTransactionBodyBytes);
        return newArray;
    };
    return NamespaceRegistrationTransactionBuilder;
}(TransactionBuilder_1.TransactionBuilder));
exports.NamespaceRegistrationTransactionBuilder = NamespaceRegistrationTransactionBuilder;
//# sourceMappingURL=NamespaceRegistrationTransactionBuilder.js.map