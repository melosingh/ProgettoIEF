"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var KeyDto_1 = require("./KeyDto");
var NamespaceIdDto_1 = require("./NamespaceIdDto");
var NamespaceLifetimeBuilder_1 = require("./NamespaceLifetimeBuilder");
var NamespacePathBuilder_1 = require("./NamespacePathBuilder");
var RootNamespaceHistoryBuilder = (function () {
    function RootNamespaceHistoryBuilder(id, ownerPublicKey, lifetime, rootAlias, paths) {
        this.id = id;
        this.ownerPublicKey = ownerPublicKey;
        this.lifetime = lifetime;
        this.rootAlias = rootAlias;
        this.paths = paths;
    }
    RootNamespaceHistoryBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var id = NamespaceIdDto_1.NamespaceIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, id.getSize());
        var ownerPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, ownerPublicKey.getSize());
        var lifetime = NamespaceLifetimeBuilder_1.NamespaceLifetimeBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, lifetime.getSize());
        var rootAlias = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var childrenCount = GeneratorUtils_1.GeneratorUtils.bufferToUint64(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        var paths = [];
        for (var i = 0; i < (Array.isArray(childrenCount) ? GeneratorUtils_1.GeneratorUtils.compact(childrenCount) : childrenCount); i++) {
            var item = NamespacePathBuilder_1.NamespacePathBuilder.loadFromBinary(Uint8Array.from(byteArray));
            paths.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new RootNamespaceHistoryBuilder(id, ownerPublicKey, lifetime, rootAlias, paths);
    };
    RootNamespaceHistoryBuilder.prototype.getId = function () {
        return this.id;
    };
    RootNamespaceHistoryBuilder.prototype.getOwnerPublicKey = function () {
        return this.ownerPublicKey;
    };
    RootNamespaceHistoryBuilder.prototype.getLifetime = function () {
        return this.lifetime;
    };
    RootNamespaceHistoryBuilder.prototype.getRootAlias = function () {
        return this.rootAlias;
    };
    RootNamespaceHistoryBuilder.prototype.getPaths = function () {
        return this.paths;
    };
    RootNamespaceHistoryBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.id.getSize();
        size += this.ownerPublicKey.getSize();
        size += this.lifetime.getSize();
        size += 1;
        size += 8;
        this.paths.forEach(function (o) { return size += o.getSize(); });
        return size;
    };
    RootNamespaceHistoryBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var idBytes = this.id.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, idBytes);
        var ownerPublicKeyBytes = this.ownerPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, ownerPublicKeyBytes);
        var lifetimeBytes = this.lifetime.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, lifetimeBytes);
        var rootAliasBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.rootAlias, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, rootAliasBytes);
        var childrenCountBytes = GeneratorUtils_1.GeneratorUtils.uint64ToBuffer(GeneratorUtils_1.GeneratorUtils.fromUint(this.paths.length));
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, childrenCountBytes);
        this.paths.forEach(function (item) {
            var pathsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, pathsBytes);
        });
        return newArray;
    };
    return RootNamespaceHistoryBuilder;
}());
exports.RootNamespaceHistoryBuilder = RootNamespaceHistoryBuilder;
//# sourceMappingURL=RootNamespaceHistoryBuilder.js.map