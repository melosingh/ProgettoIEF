"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BlockDurationDto_1 = require("./BlockDurationDto");
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var UnresolvedAddressDto_1 = require("./UnresolvedAddressDto");
var UnresolvedMosaicBuilder_1 = require("./UnresolvedMosaicBuilder");
var SecretLockTransactionBodyBuilder = (function () {
    function SecretLockTransactionBodyBuilder(secret, mosaic, duration, hashAlgorithm, recipientAddress) {
        this.secret = secret;
        this.mosaic = mosaic;
        this.duration = duration;
        this.hashAlgorithm = hashAlgorithm;
        this.recipientAddress = recipientAddress;
    }
    SecretLockTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var secret = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, secret.getSize());
        var mosaic = UnresolvedMosaicBuilder_1.UnresolvedMosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaic.getSize());
        var duration = BlockDurationDto_1.BlockDurationDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, duration.getSize());
        var hashAlgorithm = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var recipientAddress = UnresolvedAddressDto_1.UnresolvedAddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, recipientAddress.getSize());
        return new SecretLockTransactionBodyBuilder(secret, mosaic, duration, hashAlgorithm, recipientAddress);
    };
    SecretLockTransactionBodyBuilder.prototype.getSecret = function () {
        return this.secret;
    };
    SecretLockTransactionBodyBuilder.prototype.getMosaic = function () {
        return this.mosaic;
    };
    SecretLockTransactionBodyBuilder.prototype.getDuration = function () {
        return this.duration;
    };
    SecretLockTransactionBodyBuilder.prototype.getHashAlgorithm = function () {
        return this.hashAlgorithm;
    };
    SecretLockTransactionBodyBuilder.prototype.getRecipientAddress = function () {
        return this.recipientAddress;
    };
    SecretLockTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.secret.getSize();
        size += this.mosaic.getSize();
        size += this.duration.getSize();
        size += 1;
        size += this.recipientAddress.getSize();
        return size;
    };
    SecretLockTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var secretBytes = this.secret.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, secretBytes);
        var mosaicBytes = this.mosaic.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicBytes);
        var durationBytes = this.duration.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, durationBytes);
        var hashAlgorithmBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.hashAlgorithm, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, hashAlgorithmBytes);
        var recipientAddressBytes = this.recipientAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, recipientAddressBytes);
        return newArray;
    };
    return SecretLockTransactionBodyBuilder;
}());
exports.SecretLockTransactionBodyBuilder = SecretLockTransactionBodyBuilder;
//# sourceMappingURL=SecretLockTransactionBodyBuilder.js.map