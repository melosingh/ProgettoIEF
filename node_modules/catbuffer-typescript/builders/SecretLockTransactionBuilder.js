"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var SecretLockTransactionBodyBuilder_1 = require("./SecretLockTransactionBodyBuilder");
var TransactionBuilder_1 = require("./TransactionBuilder");
var SecretLockTransactionBuilder = (function (_super) {
    __extends(SecretLockTransactionBuilder, _super);
    function SecretLockTransactionBuilder(signature, signerPublicKey, version, network, type, fee, deadline, secret, mosaic, duration, hashAlgorithm, recipientAddress) {
        var _this = _super.call(this, signature, signerPublicKey, version, network, type, fee, deadline) || this;
        _this.secretLockTransactionBody = new SecretLockTransactionBodyBuilder_1.SecretLockTransactionBodyBuilder(secret, mosaic, duration, hashAlgorithm, recipientAddress);
        return _this;
    }
    SecretLockTransactionBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var superObject = TransactionBuilder_1.TransactionBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, superObject.getSize());
        var secretLockTransactionBody = SecretLockTransactionBodyBuilder_1.SecretLockTransactionBodyBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, secretLockTransactionBody.getSize());
        return new SecretLockTransactionBuilder(superObject.signature, superObject.signerPublicKey, superObject.version, superObject.network, superObject.type, superObject.fee, superObject.deadline, secretLockTransactionBody.secret, secretLockTransactionBody.mosaic, secretLockTransactionBody.duration, secretLockTransactionBody.hashAlgorithm, secretLockTransactionBody.recipientAddress);
    };
    SecretLockTransactionBuilder.prototype.getSecret = function () {
        return this.secretLockTransactionBody.getSecret();
    };
    SecretLockTransactionBuilder.prototype.getMosaic = function () {
        return this.secretLockTransactionBody.getMosaic();
    };
    SecretLockTransactionBuilder.prototype.getDuration = function () {
        return this.secretLockTransactionBody.getDuration();
    };
    SecretLockTransactionBuilder.prototype.getHashAlgorithm = function () {
        return this.secretLockTransactionBody.getHashAlgorithm();
    };
    SecretLockTransactionBuilder.prototype.getRecipientAddress = function () {
        return this.secretLockTransactionBody.getRecipientAddress();
    };
    SecretLockTransactionBuilder.prototype.getSize = function () {
        var size = _super.prototype.getSize.call(this);
        size += this.secretLockTransactionBody.getSize();
        return size;
    };
    SecretLockTransactionBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var superBytes = _super.prototype.serialize.call(this);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, superBytes);
        var secretLockTransactionBodyBytes = this.secretLockTransactionBody.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, secretLockTransactionBodyBytes);
        return newArray;
    };
    return SecretLockTransactionBuilder;
}(TransactionBuilder_1.TransactionBuilder));
exports.SecretLockTransactionBuilder = SecretLockTransactionBuilder;
//# sourceMappingURL=SecretLockTransactionBuilder.js.map