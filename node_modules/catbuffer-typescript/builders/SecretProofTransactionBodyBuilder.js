"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var Hash256Dto_1 = require("./Hash256Dto");
var UnresolvedAddressDto_1 = require("./UnresolvedAddressDto");
var SecretProofTransactionBodyBuilder = (function () {
    function SecretProofTransactionBodyBuilder(secret, hashAlgorithm, recipientAddress, proof) {
        this.secret = secret;
        this.hashAlgorithm = hashAlgorithm;
        this.recipientAddress = recipientAddress;
        this.proof = proof;
    }
    SecretProofTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var secret = Hash256Dto_1.Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, secret.getSize());
        var proofSize = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        var hashAlgorithm = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var recipientAddress = UnresolvedAddressDto_1.UnresolvedAddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, recipientAddress.getSize());
        var proof = GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), proofSize);
        byteArray.splice(0, proofSize);
        return new SecretProofTransactionBodyBuilder(secret, hashAlgorithm, recipientAddress, proof);
    };
    SecretProofTransactionBodyBuilder.prototype.getSecret = function () {
        return this.secret;
    };
    SecretProofTransactionBodyBuilder.prototype.getHashAlgorithm = function () {
        return this.hashAlgorithm;
    };
    SecretProofTransactionBodyBuilder.prototype.getRecipientAddress = function () {
        return this.recipientAddress;
    };
    SecretProofTransactionBodyBuilder.prototype.getProof = function () {
        return this.proof;
    };
    SecretProofTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.secret.getSize();
        size += 2;
        size += 1;
        size += this.recipientAddress.getSize();
        size += this.proof.length;
        return size;
    };
    SecretProofTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var secretBytes = this.secret.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, secretBytes);
        var proofSizeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.proof.length, 2);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, proofSizeBytes);
        var hashAlgorithmBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.hashAlgorithm, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, hashAlgorithmBytes);
        var recipientAddressBytes = this.recipientAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, recipientAddressBytes);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, this.proof);
        return newArray;
    };
    return SecretProofTransactionBodyBuilder;
}());
exports.SecretProofTransactionBodyBuilder = SecretProofTransactionBodyBuilder;
//# sourceMappingURL=SecretProofTransactionBodyBuilder.js.map