"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratorUtils_1 = require("./GeneratorUtils");
var UnresolvedAddressDto_1 = require("./UnresolvedAddressDto");
var UnresolvedMosaicBuilder_1 = require("./UnresolvedMosaicBuilder");
var TransferTransactionBodyBuilder = (function () {
    function TransferTransactionBodyBuilder(recipientAddress, mosaics, message) {
        this.recipientAddress = recipientAddress;
        this.transferTransactionBody_Reserved1 = 0;
        this.mosaics = mosaics;
        this.message = message;
    }
    TransferTransactionBodyBuilder.loadFromBinary = function (payload) {
        var byteArray = Array.from(payload);
        var recipientAddress = UnresolvedAddressDto_1.UnresolvedAddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, recipientAddress.getSize());
        var mosaicsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        var messageSize = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        var transferTransactionBody_Reserved1 = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        var mosaics = [];
        for (var i = 0; i < (Array.isArray(mosaicsCount) ? GeneratorUtils_1.GeneratorUtils.compact(mosaicsCount) : mosaicsCount); i++) {
            var item = UnresolvedMosaicBuilder_1.UnresolvedMosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
            mosaics.push(item);
            byteArray.splice(0, item.getSize());
        }
        var message = GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), messageSize);
        byteArray.splice(0, messageSize);
        return new TransferTransactionBodyBuilder(recipientAddress, mosaics, message);
    };
    TransferTransactionBodyBuilder.prototype.getRecipientAddress = function () {
        return this.recipientAddress;
    };
    TransferTransactionBodyBuilder.prototype.getTransferTransactionBody_Reserved1 = function () {
        return this.transferTransactionBody_Reserved1;
    };
    TransferTransactionBodyBuilder.prototype.getMosaics = function () {
        return this.mosaics;
    };
    TransferTransactionBodyBuilder.prototype.getMessage = function () {
        return this.message;
    };
    TransferTransactionBodyBuilder.prototype.getSize = function () {
        var size = 0;
        size += this.recipientAddress.getSize();
        size += 1;
        size += 2;
        size += 4;
        this.mosaics.forEach(function (o) { return size += o.getSize(); });
        size += this.message.length;
        return size;
    };
    TransferTransactionBodyBuilder.prototype.serialize = function () {
        var newArray = Uint8Array.from([]);
        var recipientAddressBytes = this.recipientAddress.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, recipientAddressBytes);
        var mosaicsCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.mosaics.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicsCountBytes);
        var messageSizeBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.message.length, 2);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, messageSizeBytes);
        var transferTransactionBody_Reserved1Bytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getTransferTransactionBody_Reserved1(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, transferTransactionBody_Reserved1Bytes);
        this.mosaics.forEach(function (item) {
            var mosaicsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, mosaicsBytes);
        });
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, this.message);
        return newArray;
    };
    return TransferTransactionBodyBuilder;
}());
exports.TransferTransactionBodyBuilder = TransferTransactionBodyBuilder;
//# sourceMappingURL=TransferTransactionBodyBuilder.js.map