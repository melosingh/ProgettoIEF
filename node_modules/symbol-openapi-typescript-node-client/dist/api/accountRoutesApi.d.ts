/// <reference types="node" />
import http = require('http');
import { AccountIds } from '../model/accountIds';
import { AccountInfoDTO } from '../model/accountInfoDTO';
import { TransactionInfoDTO } from '../model/transactionInfoDTO';
import { TransactionTypeEnum } from '../model/transactionTypeEnum';
import { Authentication, Interceptor } from '../model/models';
export declare enum AccountRoutesApiApiKeys {
}
export declare class AccountRoutesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    defaultHeaders: any;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: AccountRoutesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    getAccountConfirmedTransactions(accountId: string, pageSize?: number, id?: string, ordering?: string, type?: Array<TransactionTypeEnum>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getAccountIncomingTransactions(accountId: string, pageSize?: number, id?: string, ordering?: string, type?: Array<TransactionTypeEnum>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getAccountInfo(accountId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AccountInfoDTO;
    }>;
    getAccountOutgoingTransactions(accountId: string, pageSize?: number, id?: string, ordering?: string, type?: Array<TransactionTypeEnum>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getAccountPartialTransactions(accountId: string, pageSize?: number, id?: string, ordering?: string, type?: Array<TransactionTypeEnum>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getAccountUnconfirmedTransactions(accountId: string, pageSize?: number, id?: string, ordering?: string, type?: Array<TransactionTypeEnum>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getAccountsInfo(accountIds?: AccountIds, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<AccountInfoDTO>;
    }>;
}
