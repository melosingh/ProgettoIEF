/// <reference types="node" />
import http = require('http');
import { BlockInfoDTO } from '../model/blockInfoDTO';
import { MerkleProofInfoDTO } from '../model/merkleProofInfoDTO';
import { TransactionInfoDTO } from '../model/transactionInfoDTO';
import { Authentication, Interceptor } from '../model/models';
export declare enum BlockRoutesApiApiKeys {
}
export declare class BlockRoutesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    defaultHeaders: any;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: BlockRoutesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    getBlockByHeight(height: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BlockInfoDTO;
    }>;
    getBlockTransactions(height: string, pageSize?: number, id?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<TransactionInfoDTO>;
    }>;
    getBlocksByHeightWithLimit(height: string, limit: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<BlockInfoDTO>;
    }>;
    getMerkleTransaction(height: string, hash: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MerkleProofInfoDTO;
    }>;
}
