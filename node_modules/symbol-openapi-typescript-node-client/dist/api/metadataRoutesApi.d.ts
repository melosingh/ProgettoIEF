/// <reference types="node" />
import http = require('http');
import { MetadataDTO } from '../model/metadataDTO';
import { MetadataEntriesDTO } from '../model/metadataEntriesDTO';
import { Authentication, Interceptor } from '../model/models';
export declare enum MetadataRoutesApiApiKeys {
}
export declare class MetadataRoutesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    defaultHeaders: any;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MetadataRoutesApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    getAccountMetadata(accountId: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getAccountMetadataByKey(accountId: string, key: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getAccountMetadataByKeyAndSender(accountId: string, key: string, publicKey: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataDTO;
    }>;
    getMosaicMetadata(mosaicId: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getMosaicMetadataByKey(mosaicId: string, key: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getMosaicMetadataByKeyAndSender(mosaicId: string, key: string, publicKey: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataDTO;
    }>;
    getNamespaceMetadata(namespaceId: string, pageSize?: number, id?: string, ordering?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getNamespaceMetadataByKey(namespaceId: string, key: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataEntriesDTO;
    }>;
    getNamespaceMetadataByKeyAndSender(namespaceId: string, key: string, publicKey: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MetadataDTO;
    }>;
}
