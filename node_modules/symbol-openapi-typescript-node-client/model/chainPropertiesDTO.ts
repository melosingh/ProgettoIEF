/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 1.0.20.22
 *
 * The version of the OpenAPI document: 0.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';

/**
* Chain related configuration properties.
*/
export class ChainPropertiesDTO {
    /**
    * Set to true if block chain should calculate state hashes so that state is fully verifiable at each block.
    */
    'enableVerifiableState'?: boolean;
    /**
    * Set to true if block chain should calculate receipts so that state changes are fully verifiable at each block.
    */
    'enableVerifiableReceipts'?: boolean;
    /**
    * Mosaic id used as primary chain currency.
    */
    'currencyMosaicId'?: string;
    /**
    * Mosaic id used to provide harvesting ability.
    */
    'harvestingMosaicId'?: string;
    /**
    * Targeted time between blocks.
    */
    'blockGenerationTargetTime'?: string;
    /**
    * A higher value makes the network more biased.
    */
    'blockTimeSmoothingFactor'?: string;
    /**
    * Number of blocks that should be treated as a group for importance purposes.
    */
    'importanceGrouping'?: string;
    /**
    * Percentage of importance resulting from fee generation and beneficiary usage.
    */
    'importanceActivityPercentage'?: string;
    /**
    * Maximum number of blocks that can be rolled back.
    */
    'maxRollbackBlocks'?: string;
    /**
    * Maximum number of blocks to use in a difficulty calculation.
    */
    'maxDifficultyBlocks'?: string;
    /**
    * Default multiplier to use for dynamic fees.
    */
    'defaultDynamicFeeMultiplier'?: string;
    /**
    * Maximum lifetime a transaction can have before it expires.
    */
    'maxTransactionLifetime'?: string;
    /**
    * Maximum future time of a block that can be accepted.
    */
    'maxBlockFutureTime'?: string;
    /**
    * Initial currency atomic units available in the network.
    */
    'initialCurrencyAtomicUnits'?: string;
    /**
    * Maximum atomic units (total-supply * 10 ^ divisibility) of a mosaic allowed in the network.
    */
    'maxMosaicAtomicUnits'?: string;
    /**
    * Total whole importance units available in the network.
    */
    'totalChainImportance'?: string;
    /**
    * Minimum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
    */
    'minHarvesterBalance'?: string;
    /**
    * Maximum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
    */
    'maxHarvesterBalance'?: string;
    /**
    * Percentage of the harvested fee that is collected by the beneficiary account.
    */
    'harvestBeneficiaryPercentage'?: string;
    /**
    * Number of blocks between cache pruning.
    */
    'blockPruneInterval'?: string;
    /**
    * Maximum number of transactions per block.
    */
    'maxTransactionsPerBlock'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "enableVerifiableState",
            "baseName": "enableVerifiableState",
            "type": "boolean"
        },
        {
            "name": "enableVerifiableReceipts",
            "baseName": "enableVerifiableReceipts",
            "type": "boolean"
        },
        {
            "name": "currencyMosaicId",
            "baseName": "currencyMosaicId",
            "type": "string"
        },
        {
            "name": "harvestingMosaicId",
            "baseName": "harvestingMosaicId",
            "type": "string"
        },
        {
            "name": "blockGenerationTargetTime",
            "baseName": "blockGenerationTargetTime",
            "type": "string"
        },
        {
            "name": "blockTimeSmoothingFactor",
            "baseName": "blockTimeSmoothingFactor",
            "type": "string"
        },
        {
            "name": "importanceGrouping",
            "baseName": "importanceGrouping",
            "type": "string"
        },
        {
            "name": "importanceActivityPercentage",
            "baseName": "importanceActivityPercentage",
            "type": "string"
        },
        {
            "name": "maxRollbackBlocks",
            "baseName": "maxRollbackBlocks",
            "type": "string"
        },
        {
            "name": "maxDifficultyBlocks",
            "baseName": "maxDifficultyBlocks",
            "type": "string"
        },
        {
            "name": "defaultDynamicFeeMultiplier",
            "baseName": "defaultDynamicFeeMultiplier",
            "type": "string"
        },
        {
            "name": "maxTransactionLifetime",
            "baseName": "maxTransactionLifetime",
            "type": "string"
        },
        {
            "name": "maxBlockFutureTime",
            "baseName": "maxBlockFutureTime",
            "type": "string"
        },
        {
            "name": "initialCurrencyAtomicUnits",
            "baseName": "initialCurrencyAtomicUnits",
            "type": "string"
        },
        {
            "name": "maxMosaicAtomicUnits",
            "baseName": "maxMosaicAtomicUnits",
            "type": "string"
        },
        {
            "name": "totalChainImportance",
            "baseName": "totalChainImportance",
            "type": "string"
        },
        {
            "name": "minHarvesterBalance",
            "baseName": "minHarvesterBalance",
            "type": "string"
        },
        {
            "name": "maxHarvesterBalance",
            "baseName": "maxHarvesterBalance",
            "type": "string"
        },
        {
            "name": "harvestBeneficiaryPercentage",
            "baseName": "harvestBeneficiaryPercentage",
            "type": "string"
        },
        {
            "name": "blockPruneInterval",
            "baseName": "blockPruneInterval",
            "type": "string"
        },
        {
            "name": "maxTransactionsPerBlock",
            "baseName": "maxTransactionsPerBlock",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ChainPropertiesDTO.attributeTypeMap;
    }
}

