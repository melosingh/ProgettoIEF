"use strict";
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const symbol_openapi_typescript_node_client_1 = require("symbol-openapi-typescript-node-client");
const PublicAccount_1 = require("../model/account/PublicAccount");
const BlockInfo_1 = require("../model/blockchain/BlockInfo");
const MerklePathItem_1 = require("../model/blockchain/MerklePathItem");
const MerkleProofInfo_1 = require("../model/blockchain/MerkleProofInfo");
const UInt64_1 = require("../model/UInt64");
const Http_1 = require("./Http");
const CreateTransactionFromDTO_1 = require("./transaction/CreateTransactionFromDTO");
/**
 * Blockchain http repository.
 *
 * @since 1.0
 */
class BlockHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url
     */
    constructor(url) {
        super(url);
        this.blockRoutesApi = new symbol_openapi_typescript_node_client_1.BlockRoutesApi(url);
        this.blockRoutesApi.useQuerystring = true;
    }
    /**
     * Gets a BlockInfo for a given block height
     * @param height - Block height
     * @returns Observable<BlockInfo>
     */
    getBlockByHeight(height) {
        return this.call(this.blockRoutesApi.getBlockByHeight(height.toString()), (body) => this.toBlockInfo(body));
    }
    /**
     * Gets array of transactions included in a block for a block height
     * @param height - Block height
     * @param queryParams - (Optional) Query params
     * @returns Observable<Transaction[]>
     */
    getBlockTransactions(height, queryParams) {
        return this.call(this.blockRoutesApi.getBlockTransactions(height.toString(), this.queryParams(queryParams).pageSize, this.queryParams(queryParams).id, this.queryParams(queryParams).ordering), (body) => body.map((transactionDTO) => {
            return CreateTransactionFromDTO_1.CreateTransactionFromDTO(transactionDTO);
        }));
    }
    /**
     * Gets array of BlockInfo for a block height with limit
     * @param height - Block height from which will be the first block in the array
     * @param limit - Number of blocks returned.
     * @returns Observable<BlockInfo[]>
     */
    getBlocksByHeightWithLimit(height, limit) {
        return this.call(this.blockRoutesApi.getBlocksByHeightWithLimit(height.toString(), limit), (body) => body.map((blockDTO) => this.toBlockInfo(blockDTO)));
    }
    /**
     * This method maps a BlockInfoDTO from rest to the SDK's BlockInfo model object.
     *
     * @internal
     * @param {BlockInfoDTO} dto the dto object from rest.
     * @returns {BlockInfo} a BlockInfo model
     */
    toBlockInfo(dto) {
        const networkType = dto.block.network.valueOf();
        return new BlockInfo_1.BlockInfo(dto.meta.hash, dto.meta.generationHash, UInt64_1.UInt64.fromNumericString(dto.meta.totalFee), dto.meta.numTransactions, dto.block.signature, PublicAccount_1.PublicAccount.createFromPublicKey(dto.block.signerPublicKey, networkType), networkType, dto.block.version, dto.block.type, UInt64_1.UInt64.fromNumericString(dto.block.height), UInt64_1.UInt64.fromNumericString(dto.block.timestamp), UInt64_1.UInt64.fromNumericString(dto.block.difficulty), dto.block.feeMultiplier, dto.block.previousBlockHash, dto.block.transactionsHash, dto.block.receiptsHash, dto.block.stateHash, dto.block.beneficiaryPublicKey ? PublicAccount_1.PublicAccount.createFromPublicKey(dto.block.beneficiaryPublicKey, networkType) : undefined, dto.meta.numStatements);
    }
    /**
     * Get the merkle path for a given a transaction and block
     * Returns the merkle path for a [transaction](https://nemtech.github.io/concepts/transaction.html)
     * included in a block. The path is the complementary data needed to calculate the merkle root.
     * A client can compare if the calculated root equals the one recorded in the block header,
     * verifying that the transaction was included in the block.
     * @param height The height of the block.
     * @param hash The hash of the transaction.
     * @return Observable<MerkleProofInfo>
     */
    getMerkleTransaction(height, hash) {
        return this.call(this.blockRoutesApi.getMerkleTransaction(height.toString(), hash), (body) => new MerkleProofInfo_1.MerkleProofInfo(body.merklePath.map((payload) => new MerklePathItem_1.MerklePathItem(payload.position, payload.hash))));
    }
}
exports.BlockHttp = BlockHttp;
//# sourceMappingURL=BlockHttp.js.map