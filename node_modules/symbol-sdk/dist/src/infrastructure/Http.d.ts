/// <reference types="node" />
import * as http from 'http';
import { Observable } from 'rxjs';
import { NetworkType } from '../model/network/NetworkType';
import { QueryParams } from './QueryParams';
import { TransactionFilter } from './TransactionFilter';
/**
 * Http extended by all http services
 */
export declare abstract class Http {
    protected readonly url: string;
    /**
     * Constructor
     * @param url Base catapult-rest url
     */
    constructor(url: string);
    createNetworkTypeObservable(networkType?: NetworkType | Observable<NetworkType>): Observable<NetworkType>;
    queryParams(queryParams?: QueryParams): any;
    transactionFilter(filter?: TransactionFilter): any;
    errorHandling(error: any): Error;
    /**
     * This method knows how to call, convert and handle exception when doing remote http operations.
     * @param remoteCall the remote call
     * @param mapper the mapper from dto to the model object.
     */
    protected call<D, M>(remoteCall: Promise<{
        response: http.IncomingMessage;
        body: D;
    }>, mapper: (value: D, index: number) => M): Observable<M>;
}
