"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const operators_1 = require("rxjs/operators");
const symbol_openapi_typescript_node_client_1 = require("symbol-openapi-typescript-node-client");
const format_1 = require("../core/format");
const AccountNames_1 = require("../model/account/AccountNames");
const Address_1 = require("../model/account/Address");
const PublicAccount_1 = require("../model/account/PublicAccount");
const MosaicId_1 = require("../model/mosaic/MosaicId");
const MosaicNames_1 = require("../model/mosaic/MosaicNames");
const AddressAlias_1 = require("../model/namespace/AddressAlias");
const AliasType_1 = require("../model/namespace/AliasType");
const EmptyAlias_1 = require("../model/namespace/EmptyAlias");
const MosaicAlias_1 = require("../model/namespace/MosaicAlias");
const NamespaceId_1 = require("../model/namespace/NamespaceId");
const NamespaceInfo_1 = require("../model/namespace/NamespaceInfo");
const NamespaceName_1 = require("../model/namespace/NamespaceName");
const UInt64_1 = require("../model/UInt64");
const Http_1 = require("./Http");
/**
 * Namespace http repository.
 *
 * @since 1.0
 */
class NamespaceHttp extends Http_1.Http {
    /**
     * Constructor
     * @param url
     * @param networkType
     */
    constructor(url, networkType) {
        super(url);
        this.namespaceRoutesApi = new symbol_openapi_typescript_node_client_1.NamespaceRoutesApi(url);
        this.networkTypeObservable = this.createNetworkTypeObservable(networkType);
        this.namespaceRoutesApi.useQuerystring = true;
    }
    /**
     * Returns friendly names for array of addresses.
     * @summary Get readable names for a set of array of addresses
     * @param addresses - Array of addresses
     */
    getAccountsNames(addresses) {
        const accountIdsBody = {
            addresses: addresses.map((address) => address.plain()),
        };
        return this.call(this.namespaceRoutesApi.getAccountsNames(accountIdsBody), (body) => body.accountNames.map((accountName) => new AccountNames_1.AccountNames(Address_1.Address.createFromEncoded(accountName.address), accountName.names.map((name) => {
            return new NamespaceName_1.NamespaceName(new NamespaceId_1.NamespaceId(name), name);
        }))));
    }
    /**
     * Get readable names for a set of mosaics
     * Returns friendly names for mosaics.
     * @param mosaicIds - Array of mosaic ids
     * @return Observable<MosaicNames[]>
     */
    getMosaicsNames(mosaicIds) {
        const mosaicIdsBody = {
            mosaicIds: mosaicIds.map((id) => id.toHex()),
        };
        return this.call(this.namespaceRoutesApi.getMosaicsNames(mosaicIdsBody), (body) => body.mosaicNames.map((mosaic) => new MosaicNames_1.MosaicNames(new MosaicId_1.MosaicId(mosaic.mosaicId), mosaic.names.map((name) => {
            return new NamespaceName_1.NamespaceName(new NamespaceId_1.NamespaceId(name), name);
        }))));
    }
    /**
     * Gets the NamespaceInfo for a given namespaceId
     * @param namespaceId - Namespace id
     * @returns Observable<NamespaceInfo>
     */
    getNamespace(namespaceId) {
        return this.networkTypeObservable.pipe(operators_1.mergeMap((networkType) => this.call(this.namespaceRoutesApi.getNamespace(namespaceId.toHex()), (body) => this.toNamespaceInfo(body, networkType))));
    }
    /**
     * Gets array of NamespaceInfo for an account
     * @param address - Address
     * @param queryParams - (Optional) Query params
     * @returns Observable<NamespaceInfo[]>
     */
    getNamespacesFromAccount(address, queryParams) {
        return this.networkTypeObservable.pipe(operators_1.mergeMap((networkType) => this.call(this.namespaceRoutesApi.getNamespacesFromAccount(address.plain(), this.queryParams(queryParams).pageSize, this.queryParams(queryParams).id, this.queryParams(queryParams).ordering), (body) => body.namespaces.map((namespaceInfoDTO) => this.toNamespaceInfo(namespaceInfoDTO, networkType)))));
    }
    /**
     * Gets array of NamespaceInfo for different account
     * @param addresses - Array of Address
     * @param queryParams - (Optional) Query params
     * @returns Observable<NamespaceInfo[]>
     */
    getNamespacesFromAccounts(addresses) {
        const publicKeysBody = {
            addresses: addresses.map((address) => address.plain()),
        };
        return this.networkTypeObservable.pipe(operators_1.mergeMap((networkType) => this.call(this.namespaceRoutesApi.getNamespacesFromAccounts(publicKeysBody), (body) => body.namespaces.map((namespaceInfoDTO) => this.toNamespaceInfo(namespaceInfoDTO, networkType)))));
    }
    /**
     * Gets array of NamespaceName for different namespaceIds
     * @param namespaceIds - Array of namespace ids
     * @returns Observable<NamespaceName[]>
     */
    getNamespacesName(namespaceIds) {
        const namespaceIdsBody = {
            namespaceIds: namespaceIds.map((id) => id.toHex()),
        };
        return this.call(this.namespaceRoutesApi.getNamespacesNames(namespaceIdsBody), (body) => body.map((namespaceNameDTO) => {
            return new NamespaceName_1.NamespaceName(NamespaceId_1.NamespaceId.createFromEncoded(namespaceNameDTO.id), namespaceNameDTO.name, namespaceNameDTO.parentId ? NamespaceId_1.NamespaceId.createFromEncoded(namespaceNameDTO.parentId) : undefined);
        }));
    }
    /**
     * Gets the MosaicId from a MosaicAlias
     * @param namespaceId - the namespaceId of the namespace
     * @returns Observable<MosaicId |Â null>
     */
    getLinkedMosaicId(namespaceId) {
        return this.networkTypeObservable.pipe(operators_1.mergeMap(() => this.call(this.namespaceRoutesApi.getNamespace(namespaceId.toHex()), (body) => {
            const namespaceInfoDTO = body;
            if (namespaceInfoDTO.namespace === undefined) {
                // forward catapult-rest error
                throw namespaceInfoDTO;
            }
            if (namespaceInfoDTO.namespace.alias.type.valueOf() === AliasType_1.AliasType.None ||
                namespaceInfoDTO.namespace.alias.type.valueOf() !== AliasType_1.AliasType.Mosaic ||
                !namespaceInfoDTO.namespace.alias.mosaicId) {
                throw new Error(`No mosaicId is linked to namespace '${namespaceInfoDTO.namespace.level0}'`);
            }
            return new MosaicId_1.MosaicId(namespaceInfoDTO.namespace.alias.mosaicId);
        })));
    }
    /**
     * Gets the Address from a AddressAlias
     * @param namespaceId - the namespaceId of the namespace
     * @returns Observable<Address>
     */
    getLinkedAddress(namespaceId) {
        return this.networkTypeObservable.pipe(operators_1.mergeMap(() => this.call(this.namespaceRoutesApi.getNamespace(namespaceId.toHex()), (body) => {
            const namespaceInfoDTO = body;
            if (namespaceInfoDTO.namespace === undefined) {
                // forward catapult-rest error
                throw namespaceInfoDTO;
            }
            if (namespaceInfoDTO.namespace.alias.type.valueOf() === AliasType_1.AliasType.None ||
                namespaceInfoDTO.namespace.alias.type.valueOf() !== AliasType_1.AliasType.Address ||
                !namespaceInfoDTO.namespace.alias.address) {
                throw new Error(`No address is linked to namespace '${namespaceInfoDTO.namespace.level0}'`);
            }
            const addressDecoded = namespaceInfoDTO.namespace.alias.address;
            const address = format_1.RawAddress.addressToString(format_1.Convert.hexToUint8(addressDecoded));
            return Address_1.Address.createFromRawAddress(address);
        })));
    }
    /**
     * It maps from a NamespaceInfoDTO to NamespaceInfo
     * @param dto the dto
     * @param networkType the network type
     */
    toNamespaceInfo(dto, networkType) {
        return new NamespaceInfo_1.NamespaceInfo(dto.meta.active, dto.meta.index, dto.meta.id, dto.namespace.registrationType, dto.namespace.depth, this.extractLevels(dto.namespace), NamespaceId_1.NamespaceId.createFromEncoded(dto.namespace.parentId), PublicAccount_1.PublicAccount.createFromPublicKey(dto.namespace.ownerPublicKey, networkType), UInt64_1.UInt64.fromNumericString(dto.namespace.startHeight), UInt64_1.UInt64.fromNumericString(dto.namespace.endHeight), this.extractAlias(dto.namespace));
    }
    extractLevels(namespace) {
        const result = [];
        if (namespace.level0) {
            result.push(NamespaceId_1.NamespaceId.createFromEncoded(namespace.level0));
        }
        if (namespace.level1) {
            result.push(NamespaceId_1.NamespaceId.createFromEncoded(namespace.level1));
        }
        if (namespace.level2) {
            result.push(NamespaceId_1.NamespaceId.createFromEncoded(namespace.level2));
        }
        return result;
    }
    /**
     * Extract the alias from a namespace
     *
     * @internal
     * @access private
     * @param namespace
     */
    extractAlias(namespace) {
        if (namespace.alias && namespace.alias.type.valueOf() === AliasType_1.AliasType.Mosaic) {
            return new MosaicAlias_1.MosaicAlias(new MosaicId_1.MosaicId(namespace.alias.mosaicId));
        }
        else if (namespace.alias && namespace.alias.type.valueOf() === AliasType_1.AliasType.Address) {
            return new AddressAlias_1.AddressAlias(Address_1.Address.createFromEncoded(namespace.alias.address));
        }
        return new EmptyAlias_1.EmptyAlias();
    }
}
exports.NamespaceHttp = NamespaceHttp;
//# sourceMappingURL=NamespaceHttp.js.map