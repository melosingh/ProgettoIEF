import { Observable } from 'rxjs';
import { NamespaceRepository } from '../infrastructure/NamespaceRepository';
import { RestrictionMosaicRepository } from '../infrastructure/RestrictionMosaicRepository';
import { Address } from '../model/account/Address';
import { MosaicId } from '../model/mosaic/MosaicId';
import { NamespaceId } from '../model/namespace/NamespaceId';
import { NetworkType } from '../model/network/NetworkType';
import { MosaicRestrictionType } from '../model/restriction/MosaicRestrictionType';
import { Deadline } from '../model/transaction/Deadline';
import { Transaction } from '../model/transaction/Transaction';
import { UInt64 } from '../model/UInt64';
/**
 * MosaicRestrictionTransactionService service
 */
export declare class MosaicRestrictionTransactionService {
    private readonly restrictionMosaicRepository;
    private readonly namespaceRepository;
    private readonly defaultMosaicAddressRestrictionValue;
    private readonly defaultMosaicGlobalRestrictionValue;
    /**
     * Constructor
     * @param restrictionMosaicRepository
     * @param namespaceRepository
     */
    constructor(restrictionMosaicRepository: RestrictionMosaicRepository, namespaceRepository: NamespaceRepository);
    /**
     * Create a MosaicGlobalRestrictionTransaction object without previous restriction data
     * @param deadline - Deadline
     * @param networkType - Network identifier
     * @param mosaicId - Unresolved mosaicId
     * @param restrictionKey - Restriction key
     * @param restrictionValue - New restriction value
     * @param restrictionType - New restriction type
     * @param referenceMosaicId - Reference mosaic Id
     * @param maxFee - Max fee
     */
    createMosaicGlobalRestrictionTransaction(deadline: Deadline, networkType: NetworkType, mosaicId: MosaicId | NamespaceId, restrictionKey: UInt64, restrictionValue: string, restrictionType: MosaicRestrictionType, referenceMosaicId?: MosaicId | NamespaceId, maxFee?: UInt64): Observable<Transaction>;
    /**
     * Create a MosaicAddressRestrictionTransaction object without previous restriction data
     * @param deadline - Deadline
     * @param networkType - Network identifier
     * @param mosaicId - Unresolved mosaicId
     * @param restrictionKey - Restriction key
     * @param targetAddress - Unresolved target address
     * @param restrictionValue - New restriction value
     * @param maxFee - Max fee
     */
    createMosaicAddressRestrictionTransaction(deadline: Deadline, networkType: NetworkType, mosaicId: MosaicId | NamespaceId, restrictionKey: UInt64, targetAddress: Address | NamespaceId, restrictionValue: string, maxFee?: UInt64): Observable<Transaction>;
    /**
     * Get address global restriction previous value and type
     * @param mosaicId - Mosaic identifier
     * @param restrictionKey - Mosaic global restriction key
     * @param targetAddress - The target address
     * @return {Observable<string | undefined>}
     */
    private getAddressRestrictionEntry;
    /**
     * Get mosaic global restriction prvious value and type
     * @param mosaicId - Mosaic identifier
     * @param restrictionKey - Mosaic global restriction key
     * @return {Observable<MosaicGlobalRestrictionItem | undefined>}
     */
    private getGlobalRestrictionEntry;
    /**
     * Check if input restriction key and value are invalid or not
     * @param value - Restriction value
     */
    private validateInput;
}
